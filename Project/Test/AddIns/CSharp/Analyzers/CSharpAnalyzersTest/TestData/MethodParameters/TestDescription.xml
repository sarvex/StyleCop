<?xml version="1.0" encoding="utf-8" ?>
<StyleCopTestDescription TestName="MethodParameters">
  <!-- Tests the valid ways that the parameters can be placed.  -->
  <Test Name="MethodDeclarationValidPlacement">
    <TestCodeFile>MethodDeclarationValidPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.MethodDeclarationValidPlacement1.KnownError.Method1" LineNumber="12" Rule="ClosingParenthesisMustBeOnLineOfOpeningParenthesis" />
    </ExpectedViolations>
  </Test>
  
  <!-- Tests the placement of the opening parenthesis in a method declaration.  -->
  <Test Name="MethodDeclarationOpeningParenthesisPlacement">
    <TestCodeFile>MethodDeclarationOpeningParenthesisPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.NormalMethods1.Method4" LineNumber="13" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.NormalMethods1.Method5" LineNumber="18" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.NormalMethods1.Method5" LineNumber="19" Rule="ClosingParenthesisMustBeOnLineOfOpeningParenthesis" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.NormalMethods1.Method6%int" LineNumber="24" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.NormalMethods1.Metohd7%int" LineNumber="29" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.NormalMethods1.Method8%int" LineNumber="36" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method4%int" LineNumber="49" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method5%int" LineNumber="54" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method6%int" LineNumber="60" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method7%int" LineNumber="68" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method8%int" LineNumber="73" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method9%int" LineNumber="81" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method10%int%int" LineNumber="89" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method11%int%int" LineNumber="100" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method12%int%int" LineNumber="111" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method13%int%int" LineNumber="120" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method14%int" LineNumber="130" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method15%int" LineNumber="139" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method16%int%int" LineNumber="148" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method17%int%int" LineNumber="160" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method18%int%int" LineNumber="172" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.AssemblyTags1.Method19%int%int" LineNumber="182" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.Comments1.Method1%int" LineNumber="199" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.Comments1.Method2%int" LineNumber="204" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.Comments1.Method3%int" LineNumber="210" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.Comments1.Method4%int" LineNumber="219" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.Comments1.Method5%int" LineNumber="224" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.Comments1.Method6%int%int" LineNumber="233" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.Comments1.Method7%int%int" LineNumber="246" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.Comments1.Method8%int%int" LineNumber="259" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.Comments1.Method9%int" LineNumber="273" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.CommentsAndAssemblyTags1.Method1%int" LineNumber="290" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.CommentsAndAssemblyTags1.Method2%int" LineNumber="300" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.CommentsAndAssemblyTags1.Method3%int%int" LineNumber="311" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.CommentsAndAssemblyTags1.Method4%int%int" LineNumber="328" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.CommentsAndAssemblyTags1.Method5%int%int" LineNumber="345" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.MethodDeclarationOpeningParenthesisPlacement1.CommentsAndAssemblyTags1.Method6%int" LineNumber="363" Rule="OpeningParenthesisMustBeOnDeclarationLine" />    
    </ExpectedViolations>
  </Test>

  <!-- Tests the placement of the closing parenthesis in a method declaration.  -->
  <Test Name="MethodDeclarationClosingParenthesisPlacement">
    <TestCodeFile>MethodDeclarationClosingParenthesisPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.NormalMethods1.Method5" LineNumber="14" Rule="ClosingParenthesisMustBeOnLineOfOpeningParenthesis" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.NormalMethods1.Method6%int" LineNumber="19" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.NormalMethods1.Method7%int" LineNumber="25" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.NormalMethods1.Method8%int%int" LineNumber="32" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.NormalMethods1.Method9%int%int" LineNumber="40" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method10%int" LineNumber="53" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method11%int" LineNumber="59" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method12%int" LineNumber="66" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method13%int%int" LineNumber="73" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method14%int%int" LineNumber="82" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method15%int%int" LineNumber="90" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method16%int%int" LineNumber="100" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method17%int" LineNumber="108" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method18%int" LineNumber="116" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method19%int%int" LineNumber="127" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method20%int%int" LineNumber="138" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method21%int%int" LineNumber="150" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method22%int%int" LineNumber="162" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method23%int%int" LineNumber="175" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method24%int%int" LineNumber="188" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.AssemblyTags1.Method25%int%int" LineNumber="198" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method10%int" LineNumber="211" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method11%int" LineNumber="217" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method12%int" LineNumber="225" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method13%int%int" LineNumber="232" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method14%int%int" LineNumber="243" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method15%int%int" LineNumber="251" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method16%int%int" LineNumber="263" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method17%int" LineNumber="272" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method18%int" LineNumber="281" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method19%int%int" LineNumber="294" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method20%int%int" LineNumber="307" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method21%int%int" LineNumber="321" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method22%int%int" LineNumber="335" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method23%int%int" LineNumber="350" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method24%int%int" LineNumber="365" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.Comments1.Method25%int%int" LineNumber="377" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.CommentsAndAssemblyTags1.Method1%int" LineNumber="395" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.CommentsAndAssemblyTags1.Method2%int%int" LineNumber="410" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.CommentsAndAssemblyTags1.Method3%int%int" LineNumber="426" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.CommentsAndAssemblyTags1.Method4%int" LineNumber="437" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.CommentsAndAssemblyTags1.Method5%int" LineNumber="448" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.CommentsAndAssemblyTags1.Method6%int%int" LineNumber="465" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.CommentsAndAssemblyTags1.Method7%int%int" LineNumber="482" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.CommentsAndAssemblyTags1.Method8%int%int" LineNumber="500" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.CommentsAndAssemblyTags1.Method9%int%int" LineNumber="518" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.CommentsAndAssemblyTags1.Method10%int%int" LineNumber="537" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.CommentsAndAssemblyTags1.Method11%int%int" LineNumber="556" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.MethodDeclarationClosingParenthesisPlacement1.CommentsAndAssemblyTags1.Method12%int%int" LineNumber="574" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the placement of the comma between two parameters. -->
  <Test Name="MethodDeclarationCommaPlacement">
    <TestCodeFile>MethodDeclarationCommaPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.MethodDeclarationCommaPlacement1.NormalMethods1.Method7%int%int" LineNumber="13" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.NormalMethods1.Method8%int%int" LineNumber="18" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.NormalMethods1.Method9%int%int" LineNumber="25" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.NormalMethods1.Method10%int%int%int" LineNumber="31" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.NormalMethods1.Method10%int%int%int" LineNumber="33" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.NormalMethods1.Method11%int%int" LineNumber="41" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.NormalMethods1.Method12%int%int" LineNumber="48" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method5%int%int" LineNumber="62" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method6%int%int" LineNumber="67" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method7%int%int" LineNumber="73" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method8%int%int" LineNumber="81" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method9%int%int" LineNumber="88" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method10%int%int%int" LineNumber="94" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method10%int%int%int" LineNumber="96" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method11%int%int%int" LineNumber="104" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method11%int%int%int" LineNumber="107" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method12%int%int" LineNumber="116" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method13%int%int" LineNumber="124" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method14%int%int" LineNumber="131" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method15%int%int" LineNumber="140" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method16%int%int" LineNumber="151" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method17%int%int" LineNumber="163" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method18%int%int" LineNumber="173" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method19%int%int" LineNumber="182" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method20%int%int" LineNumber="192" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.AssemblyTags1.Method21%int%int" LineNumber="202" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method5%int%int" LineNumber="217" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method6%int%int" LineNumber="222" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method7%int%int" LineNumber="228" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method8%int%int" LineNumber="237" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method9%int%int" LineNumber="245" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method10%int%int%int" LineNumber="251" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method10%int%int%int" LineNumber="253" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method11%int%int%int" LineNumber="262" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method11%int%int%int" LineNumber="266" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method12%int%int" LineNumber="276" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method13%int%int" LineNumber="285" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method14%int%int" LineNumber="292" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method15%int%int" LineNumber="302" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method16%int%int" LineNumber="315" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method18%int%int" LineNumber="327" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.Comments1.Method20%int%int" LineNumber="339" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.CommentsAndAssemblyTags1.Method1%int%int" LineNumber="355" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.CommentsAndAssemblyTags1.Method2%int%int" LineNumber="370" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.CommentsAndAssemblyTags1.Method3%int%int%int" LineNumber="380" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.CommentsAndAssemblyTags1.Method3%int%int%int" LineNumber="386" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.CommentsAndAssemblyTags1.Method4%int%int" LineNumber="402" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.CommentsAndAssemblyTags1.Method5%int%int" LineNumber="413" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.CommentsAndAssemblyTags1.Method6%int%int" LineNumber="430" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.CommentsAndAssemblyTags1.Method7%int%int" LineNumber="447" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.MethodDeclarationCommaPlacement1.CommentsAndAssemblyTags1.Method8%int%int" LineNumber="465" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the start position of the parameter list. -->
  <Test Name="MethodDeclarationParameterListStart">
    <TestCodeFile>MethodDeclarationParameterListStart.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.MethodDeclarationParameterListStart1.NormalMethods1.Method6%int" LineNumber="14" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.NormalMethods1.Method7%int%int" LineNumber="20" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.NormalMethods1.Method8%int%int" LineNumber="26" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.NormalMethods1.Method9%int" LineNumber="34" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method8%int" LineNumber="48" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method9%int" LineNumber="55" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method10%int%int" LineNumber="61" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method11%int%int" LineNumber="67" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method12%int%int" LineNumber="75" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method13%int" LineNumber="84" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method14%int" LineNumber="92" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method15%int" LineNumber="100" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method15%int" LineNumber="108" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method16%int" LineNumber="116" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method17%int" LineNumber="127" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method18%int" LineNumber="134" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method19%int" LineNumber="141" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method20%int" LineNumber="149" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method21%int" LineNumber="157" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.AssemblyTags1.Method22%int" LineNumber="164" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method1%int" LineNumber="178" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method2%int" LineNumber="186" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method3%int%int" LineNumber="192" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method4%int%int" LineNumber="198" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method5%int%int" LineNumber="207" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method6%int" LineNumber="217" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method7%int" LineNumber="226" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method8%int" LineNumber="234" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method9%int" LineNumber="243" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method10%int" LineNumber="252" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method11%int" LineNumber="265" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method12%int" LineNumber="273" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method13%int" LineNumber="281" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.Comments1.Method14%int" LineNumber="290" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.CommentsAndAssemblyTags1.Method1%int" LineNumber="308" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.CommentsAndAssemblyTags1.Method3%int%int" LineNumber="318" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.CommentsAndAssemblyTags1.Method4%int" LineNumber="334" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.CommentsAndAssemblyTags1.Method5%int" LineNumber="344" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.CommentsAndAssemblyTags1.Method6%int" LineNumber="355" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.CommentsAndAssemblyTags1.Method7%int" LineNumber="366" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.CommentsAndAssemblyTags1.Method8%int" LineNumber="381" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.CommentsAndAssemblyTags1.Method9%int" LineNumber="391" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.CommentsAndAssemblyTags1.Method10%int" LineNumber="402" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterListStart1.CommentsAndAssemblyTags1.Method11%int" LineNumber="413" Rule="ParameterListMustFollowDeclaration" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the starting position of a second or third parameter. -->
  <Test Name="MethodDeclarationParameterFollowsComma">
    <TestCodeFile>MethodDeclarationParameterFollowsComma.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.NormalMethods1.Method8%int%int" LineNumber="12" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.NormalMethods1.Method8%int%int" LineNumber="14" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.NormalMethods1.Method9%int%int" LineNumber="21" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.NormalMethods1.Method10%int%int" LineNumber="28" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.NormalMethods1.Method11%int%int%int" LineNumber="36" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.NormalMethods1.Method12%int%int%int" LineNumber="45" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method10%int%int" LineNumber="60" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method11%int%int%int" LineNumber="67" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method12%int%int%int" LineNumber="77" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method13%int%int%int" LineNumber="88" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method14%int%int" LineNumber="99" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method15%int%int" LineNumber="109" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method16%int%int%int" LineNumber="120" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method17%int%int%int" LineNumber="129" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method17%int%int%int" LineNumber="132" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method18%int%int" LineNumber="143" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method19%int%int" LineNumber="154" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method20%int%int" LineNumber="165" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method21%int%int" LineNumber="174" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method22%int%int" LineNumber="183" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method23%int%int" LineNumber="194" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.AssemblyTags1.Method24%int%int" LineNumber="205" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.Comments1.Method1%int%int" LineNumber="220" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.Comments1.Method2%int%int%int" LineNumber="227" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.Comments1.Method3%int%int%int" LineNumber="237" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.Comments1.Method4%int%int" LineNumber="249" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.Comments1.Method5%int%int" LineNumber="261" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.Comments1.Method6%int%int%int" LineNumber="275" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.Comments1.Method7%int%int%int" LineNumber="286" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.Comments1.Method7%int%int%int" LineNumber="290" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.Comments1.Method8%int%int" LineNumber="303" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.Comments1.Method9%int%int" LineNumber="316" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.Comments1.Method10%int%int" LineNumber="329" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.Comments1.Method11%int%int" LineNumber="340" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.Comments1.Method12%int%int" LineNumber="352" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.CommentsAndAssemblyTags1.Method1%int%int" LineNumber="375" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.CommentsAndAssemblyTags1.Method2%int%int" LineNumber="391" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.CommentsAndAssemblyTags1.Method3%int%int%int" LineNumber="411" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.CommentsAndAssemblyTags1.Method4%int%int%int" LineNumber="426" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.CommentsAndAssemblyTags1.Method4%int%int%int" LineNumber="432" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.CommentsAndAssemblyTags1.Method5%int%int" LineNumber="449" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.CommentsAndAssemblyTags1.Method6%int%int" LineNumber="466" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.CommentsAndAssemblyTags1.Method7%int%int" LineNumber="483" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.CommentsAndAssemblyTags1.Method8%int%int" LineNumber="500" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationParameterFollowsComma1.CommentsAndAssemblyTags1.Method9%int%int" LineNumber="518" Rule="ParameterMustFollowComma" />
    </ExpectedViolations>
  </Test>

  <!-- If parameters are on separate lines, the first parameter must start on the line following the declaration. -->
  <Test Name="MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration">
    <TestCodeFile>MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method1%int%int" LineNumber="12" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method2%int%int%int" LineNumber="17" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method2%int%int%int" LineNumber="17" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method2%int%int%int" LineNumber="18" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method3%int%int%int" LineNumber="22" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method4%int%int%int" LineNumber="28" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method4%int%int%int" LineNumber="28" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method4%int%int%int" LineNumber="28" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method5%int%int%int%int" LineNumber="33" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method5%int%int%int%int" LineNumber="33" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method5%int%int%int%int" LineNumber="33" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method5%int%int%int%int" LineNumber="34" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method6%int%int%int%int" LineNumber="38" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method6%int%int%int%int" LineNumber="38" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method6%int%int%int%int" LineNumber="38" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int" LineNumber="51" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int" LineNumber="56" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int" LineNumber="62" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int" LineNumber="67" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int" LineNumber="73" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int" LineNumber="80" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int" LineNumber="87" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int" LineNumber="92" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int" LineNumber="98" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int" LineNumber="103" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int" LineNumber="109" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int" LineNumber="116" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="125" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="125" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="126" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="130" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="138" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="144" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="152" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="162" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="172" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="172" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="172" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="177" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="177" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="177" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="183" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="183" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="183" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="188" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="188" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="188" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="194" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="194" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="194" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="201" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="201" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.AssemblyTags1.Method1%int%int%int" LineNumber="201" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method1%int%int" LineNumber="215" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method2%int%int" LineNumber="220" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method3%int%int" LineNumber="227" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method4%int%int" LineNumber="235" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method5%int%int" LineNumber="240" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method6%int%int" LineNumber="247" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method7%int%int%int" LineNumber="255" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method7%int%int%int" LineNumber="255" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method7%int%int%int" LineNumber="256" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method8%int%int%int" LineNumber="260" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method9%int%int%int" LineNumber="270" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method10%int%int%int" LineNumber="282" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method10%int%int%int" LineNumber="282" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method10%int%int%int" LineNumber="282" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method11%int%int%int" LineNumber="287" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method11%int%int%int" LineNumber="287" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method11%int%int%int" LineNumber="287" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method12%int%int%int" LineNumber="294" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method12%int%int%int" LineNumber="294" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.Comments1.Method12%int%int%int" LineNumber="294" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.CommentsAndAssemblyTags1.Method1%int%int" LineNumber="309" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.CommentsAndAssemblyTags1.Method2%int%int" LineNumber="318" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.CommentsAndAssemblyTags1.Method3%int%int" LineNumber="328" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.CommentsAndAssemblyTags1.Method4%int%int" LineNumber="337" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.CommentsAndAssemblyTags1.Method5%int%int%int" LineNumber="347" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.CommentsAndAssemblyTags1.Method6%int%int%int" LineNumber="361" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.CommentsAndAssemblyTags1.Method7%int%int%int" LineNumber="377" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.CommentsAndAssemblyTags1.Method7%int%int%int" LineNumber="377" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.CommentsAndAssemblyTags1.Method7%int%int%int" LineNumber="377" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.CommentsAndAssemblyTags1.Method8%int%int%int" LineNumber="386" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.CommentsAndAssemblyTags1.Method8%int%int%int" LineNumber="386" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.CommentsAndAssemblyTags1.Method8%int%int%int" LineNumber="386" Rule="ParameterMustFollowComma" />
    </ExpectedViolations>
  </Test>

  <!-- If parameters are on separate lines, the first parameter must start on the line following the declaration. -->
  <Test Name="MethodDeclarationSpanningMultipleLines">
    <TestCodeFile>MethodDeclarationSpanningMultipleLines.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method1%int%int" LineNumber="10" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method1%int%int" LineNumber="10" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method1%int%int" LineNumber="10" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method2%int%int" LineNumber="15" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method2%int%int" LineNumber="15" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method2%int%int" LineNumber="15" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method3%int%int" LineNumber="20" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method3%int%int" LineNumber="20" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method3%int%int" LineNumber="20" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method4%int%int" LineNumber="27" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method5%int%int" LineNumber="34" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method6%int%int" LineNumber="41" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method7%int%int%int" LineNumber="46" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method7%int%int%int" LineNumber="46" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method7%int%int%int" LineNumber="46" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method7%int%int%int" LineNumber="46" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method8%int%int%int" LineNumber="51" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method8%int%int%int" LineNumber="51" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method8%int%int%int" LineNumber="51" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method8%int%int%int" LineNumber="51" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method9%int%int%int" LineNumber="56" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method9%int%int%int" LineNumber="56" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method9%int%int%int" LineNumber="56" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method9%int%int%int" LineNumber="56" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method10%int%int%int" LineNumber="64" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method11%int%int%int" LineNumber="72" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.NormalMethods1.Method12%int%int%int" LineNumber="80" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method1%int%int" LineNumber="93" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method1%int%int" LineNumber="93" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method1%int%int" LineNumber="93" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method2%int%int" LineNumber="98" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method2%int%int" LineNumber="99" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method3%int%int" LineNumber="106" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method4%int%int" LineNumber="114" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method5%int%int" LineNumber="123" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method6%int%int" LineNumber="132" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method7%int%int" LineNumber="137" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method7%int%int" LineNumber="137" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method7%int%int" LineNumber="137" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method8%int%int" LineNumber="142" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method8%int%int" LineNumber="143" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method9%int%int" LineNumber="150" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method10%int%int" LineNumber="158" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method11%int%int" LineNumber="167" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method12%int%int" LineNumber="176" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method13%int%int" LineNumber="181" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method13%int%int" LineNumber="181" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method13%int%int" LineNumber="181" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method14%int%int" LineNumber="186" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method14%int%int" LineNumber="187" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method15%int%int" LineNumber="194" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method16%int%int" LineNumber="202" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method17%int%int" LineNumber="211" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method18%int%int" LineNumber="220" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method19%int%int%int" LineNumber="225" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method19%int%int%int" LineNumber="225" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method19%int%int%int" LineNumber="225" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method19%int%int%int" LineNumber="225" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method20%int%int%int" LineNumber="230" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method20%int%int%int" LineNumber="230" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method20%int%int%int" LineNumber="230" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method20%int%int%int" LineNumber="231" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method21%int%int%int" LineNumber="239" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method22%int%int%int" LineNumber="248" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method23%int%int%int" LineNumber="258" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method24%int%int%int" LineNumber="268" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method25%int%int%int" LineNumber="273" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method25%int%int%int" LineNumber="273" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method25%int%int%int" LineNumber="273" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method25%int%int%int" LineNumber="273" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method26%int%int%int" LineNumber="278" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method26%int%int%int" LineNumber="278" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method26%int%int%int" LineNumber="278" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method26%int%int%int" LineNumber="279" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method27%int%int%int" LineNumber="287" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method28%int%int%int" LineNumber="296" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method29%int%int%int" LineNumber="306" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method30%int%int%int" LineNumber="316" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method31%int%int%int" LineNumber="321" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method31%int%int%int" LineNumber="321" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method31%int%int%int" LineNumber="321" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method31%int%int%int" LineNumber="321" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method32%int%int%int" LineNumber="326" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method32%int%int%int" LineNumber="326" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method32%int%int%int" LineNumber="326" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method32%int%int%int" LineNumber="327" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method33%int%int%int" LineNumber="335" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method34%int%int%int" LineNumber="344" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method35%int%int%int" LineNumber="354" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.AssemblyTags1.Method36%int%int%int" LineNumber="364" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method1%int%int" LineNumber="377" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method1%int%int" LineNumber="377" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method1%int%int" LineNumber="377" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method2%int%int" LineNumber="382" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method2%int%int" LineNumber="383" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method3%int%int" LineNumber="390" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method4%int%int" LineNumber="399" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method5%int%int" LineNumber="409" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method6%int%int" LineNumber="414" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method6%int%int" LineNumber="414" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method6%int%int" LineNumber="414" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method7%int%int" LineNumber="419" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method7%int%int" LineNumber="420" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method8%int%int" LineNumber="427" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method9%int%int" LineNumber="436" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method10%int%int" LineNumber="446" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method11%int%int" LineNumber="451" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method11%int%int" LineNumber="451" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method11%int%int" LineNumber="451" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method12%int%int" LineNumber="456" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method12%int%int" LineNumber="457" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method13%int%int" LineNumber="465" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method14%int%int" LineNumber="474" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.Comments1.Method15%int%int" LineNumber="484" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.CommentsAndAssemblyTags1.Method1%int%int" LineNumber="503" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.CommentsAndAssemblyTags1.Method2%int%int" LineNumber="515" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.CommentsAndAssemblyTags1.Method3%int%int" LineNumber="526" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.CommentsAndAssemblyTags1.Method4%int%int" LineNumber="538" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.CommentsAndAssemblyTags1.Method5%int%int" LineNumber="548" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.CommentsAndAssemblyTags1.Method6%int%int" LineNumber="559" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodDeclarationSpanningMultipleLines1.CommentsAndAssemblyTags1.Method7%int%int" LineNumber="571" Rule="ParameterMustNotSpanMultipleLines" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the valid ways that the parameters can be placed.  -->
  <Test Name="InterfaceMethodDeclarationValidPlacement">
    <TestCodeFile>InterfaceMethodDeclarationValidPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.InterfaceMethodDeclarationValidPlacement1.KnownError.Method1" LineNumber="12" Rule="ClosingParenthesisMustBeOnLineOfOpeningParenthesis" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the placement of the opening parenthesis in a method declaration.  -->
  <Test Name="InterfaceMethodDeclarationOpeningParenthesisPlacement">
    <TestCodeFile>InterfaceMethodDeclarationOpeningParenthesisPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.InterfaceMethodDeclarationOpeningParenthesisPlacement1.NormalMethods1.Method4" LineNumber="11" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.InterfaceMethodDeclarationOpeningParenthesisPlacement1.NormalMethods1.Method5" LineNumber="14" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.InterfaceMethodDeclarationOpeningParenthesisPlacement1.NormalMethods1.Method5" LineNumber="15" Rule="ClosingParenthesisMustBeOnLineOfOpeningParenthesis" />
      <Violation Section="Root.InterfaceMethodDeclarationOpeningParenthesisPlacement1.NormalMethods1.Method6%int" LineNumber="18" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.InterfaceMethodDeclarationOpeningParenthesisPlacement1.NormalMethods1.Metohd7%int" LineNumber="21" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.InterfaceMethodDeclarationOpeningParenthesisPlacement1.NormalMethods1.Method8%int" LineNumber="26" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the placement of the closing parenthesis in a method declaration.  -->
  <Test Name="InterfaceMethodDeclarationClosingParenthesisPlacement">
    <TestCodeFile>InterfaceMethodDeclarationClosingParenthesisPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.InterfaceMethodDeclarationClosingParenthesisPlacement1.NormalMethods1.Method5" LineNumber="12" Rule="ClosingParenthesisMustBeOnLineOfOpeningParenthesis" />
      <Violation Section="Root.InterfaceMethodDeclarationClosingParenthesisPlacement1.NormalMethods1.Method6%int" LineNumber="15" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.InterfaceMethodDeclarationClosingParenthesisPlacement1.NormalMethods1.Method7%int" LineNumber="19" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.InterfaceMethodDeclarationClosingParenthesisPlacement1.NormalMethods1.Method8%int%int" LineNumber="24" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.InterfaceMethodDeclarationClosingParenthesisPlacement1.NormalMethods1.Method9%int%int" LineNumber="30" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the placement of the comma between two parameters. -->
  <Test Name="InterfaceMethodDeclarationCommaPlacement">
    <TestCodeFile>InterfaceMethodDeclarationCommaPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.InterfaceMethodDeclarationCommaPlacement1.NormalMethods1.Method7%int%int" LineNumber="10" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationCommaPlacement1.NormalMethods1.Method7%int%int" LineNumber="11" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.InterfaceMethodDeclarationCommaPlacement1.NormalMethods1.Method8%int%int" LineNumber="13" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationCommaPlacement1.NormalMethods1.Method8%int%int" LineNumber="14" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.InterfaceMethodDeclarationCommaPlacement1.NormalMethods1.Method9%int%int" LineNumber="19" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.InterfaceMethodDeclarationCommaPlacement1.NormalMethods1.Method10%int%int%int" LineNumber="23" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.InterfaceMethodDeclarationCommaPlacement1.NormalMethods1.Method10%int%int%int" LineNumber="25" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.InterfaceMethodDeclarationCommaPlacement1.NormalMethods1.Method11%int%int" LineNumber="31" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.InterfaceMethodDeclarationCommaPlacement1.NormalMethods1.Method12%int%int" LineNumber="36" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the start position of the parameter list. -->
  <Test Name="InterfaceMethodDeclarationParameterListStart">
    <TestCodeFile>InterfaceMethodDeclarationParameterListStart.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.InterfaceMethodDeclarationParameterListStart1.NormalMethods1.Method6%int" LineNumber="12" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationParameterListStart1.NormalMethods1.Method7%int%int" LineNumber="16" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationParameterListStart1.NormalMethods1.Method8%int%int" LineNumber="20" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationParameterListStart1.NormalMethods1.Method9%int" LineNumber="26" Rule="ParameterListMustFollowDeclaration" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the starting position of a second or third parameter. -->
  <Test Name="InterfaceMethodDeclarationParameterFollowsComma">
    <TestCodeFile>InterfaceMethodDeclarationParameterFollowsComma.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.InterfaceMethodDeclarationParameterFollowsComma1.NormalMethods1.Method8%int%int" LineNumber="10" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationParameterFollowsComma1.NormalMethods1.Method8%int%int" LineNumber="12" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationParameterFollowsComma1.NormalMethods1.Method9%int%int" LineNumber="17" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationParameterFollowsComma1.NormalMethods1.Method10%int%int" LineNumber="23" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationParameterFollowsComma1.NormalMethods1.Method11%int%int%int" LineNumber="29" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationParameterFollowsComma1.NormalMethods1.Method12%int%int%int" LineNumber="36" Rule="ParameterMustFollowComma" />
    </ExpectedViolations>
  </Test>

  <!-- If parameters are on separate lines, the first parameter must start on the line following the declaration. -->
  <Test Name="InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration">
    <TestCodeFile>InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method1%int%int" LineNumber="12" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method2%int%int%int" LineNumber="15" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method2%int%int%int" LineNumber="15" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method2%int%int%int" LineNumber="16" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method3%int%int%int" LineNumber="18" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method4%int%int%int" LineNumber="22" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method4%int%int%int" LineNumber="22" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method4%int%int%int" LineNumber="22" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method5%int%int%int%int" LineNumber="25" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method5%int%int%int%int" LineNumber="25" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method5%int%int%int%int" LineNumber="25" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method5%int%int%int%int" LineNumber="26" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method6%int%int%int%int" LineNumber="28" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method6%int%int%int%int" LineNumber="28" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.Method6%int%int%int%int" LineNumber="28" Rule="ParameterMustFollowComma" />
    </ExpectedViolations>
  </Test>

  <!-- If parameters are on separate lines, the first parameter must start on the line following the declaration. -->
  <Test Name="InterfaceMethodDeclarationSpanningMultipleLines">
    <TestCodeFile>InterfaceMethodDeclarationSpanningMultipleLines.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method1%int%int" LineNumber="10" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method1%int%int" LineNumber="10" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method1%int%int" LineNumber="10" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method2%int%int" LineNumber="13" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method2%int%int" LineNumber="13" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method2%int%int" LineNumber="13" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method3%int%int" LineNumber="16" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method3%int%int" LineNumber="16" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method3%int%int" LineNumber="16" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method4%int%int" LineNumber="21" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method5%int%int" LineNumber="26" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method6%int%int" LineNumber="31" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method7%int%int%int" LineNumber="34" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method7%int%int%int" LineNumber="34" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method7%int%int%int" LineNumber="34" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method7%int%int%int" LineNumber="34" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method8%int%int%int" LineNumber="37" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method8%int%int%int" LineNumber="37" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method8%int%int%int" LineNumber="37" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method8%int%int%int" LineNumber="37" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method9%int%int%int" LineNumber="40" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method9%int%int%int" LineNumber="40" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method9%int%int%int" LineNumber="40" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method9%int%int%int" LineNumber="40" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method10%int%int%int" LineNumber="46" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method11%int%int%int" LineNumber="52" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.InterfaceMethodDeclarationSpanningMultipleLines1.NormalMethods1.Method12%int%int%int" LineNumber="58" Rule="ParameterMustNotSpanMultipleLines" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the valid ways that the parameters can be placed.  -->
  <Test Name="IndexerDeclarationValidPlacement">
    <TestCodeFile>IndexerDeclarationValidPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.IndexerDeclarationValidPlacement1.KnownError.this%int" LineNumber="12" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the placement of the opening parenthesis in a indexer declaration.  -->
  <Test Name="IndexerDeclarationOpeningParenthesisPlacement">
    <TestCodeFile>IndexerDeclarationOpeningParenthesisPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.IndexerDeclarationOpeningParenthesisPlacement1.NormalMethods1.this%int" LineNumber="8" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.IndexerDeclarationOpeningParenthesisPlacement1.NormalMethods1.this%short" LineNumber="14" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.IndexerDeclarationOpeningParenthesisPlacement1.NormalMethods1.this%long" LineNumber="22" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the placement of the closing parenthesis in a indexer declaration.  -->
  <Test Name="IndexerDeclarationClosingParenthesisPlacement">
    <TestCodeFile>IndexerDeclarationClosingParenthesisPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.IndexerDeclarationClosingParenthesisPlacement1.NormalMethods1.this%int" LineNumber="8" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.IndexerDeclarationClosingParenthesisPlacement1.NormalMethods1.this%int" LineNumber="15" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.IndexerDeclarationClosingParenthesisPlacement1.NormalMethods1.this%int%int" LineNumber="23" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.IndexerDeclarationClosingParenthesisPlacement1.NormalMethods1.this%int%int" LineNumber="33" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the placement of the comma between two parameters. -->
  <Test Name="IndexerDeclarationCommaPlacement">
    <TestCodeFile>IndexerDeclarationCommaPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.IndexerDeclarationCommaPlacement1.NormalMethods1.this%int%int" LineNumber="7" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.IndexerDeclarationCommaPlacement1.NormalMethods1.this%int%int" LineNumber="8" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.IndexerDeclarationCommaPlacement1.NormalMethods1.this%int%int" LineNumber="13" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.IndexerDeclarationCommaPlacement1.NormalMethods1.this%int%int" LineNumber="14" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.IndexerDeclarationCommaPlacement1.NormalMethods1.this%int%int" LineNumber="22" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.IndexerDeclarationCommaPlacement1.NormalMethods1.this%int%int%int[,][]" LineNumber="29" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.IndexerDeclarationCommaPlacement1.NormalMethods1.this%int%int%int[,][]" LineNumber="31" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.IndexerDeclarationCommaPlacement1.NormalMethods1.this%int%int" LineNumber="40" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.IndexerDeclarationCommaPlacement1.NormalMethods1.this%int%int" LineNumber="48" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the start position of the parameter list. -->
  <Test Name="IndexerDeclarationParameterListStart">
    <TestCodeFile>IndexerDeclarationParameterListStart.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.IndexerDeclarationParameterListStart1.NormalMethods1.this%int[,,]" LineNumber="9" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.IndexerDeclarationParameterListStart1.NormalMethods1.this%short%int" LineNumber="16" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.IndexerDeclarationParameterListStart1.NormalMethods1.this%long%int" LineNumber="23" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.IndexerDeclarationParameterListStart1.NormalMethods1.this%double" LineNumber="35" Rule="ParameterListMustFollowDeclaration" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the starting position of a second or third parameter. -->
  <Test Name="IndexerDeclarationParameterFollowsComma">
    <TestCodeFile>IndexerDeclarationParameterFollowsComma.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.IndexerDeclarationParameterFollowsComma1.NormalMethods1.this%int[,]%int[][]" LineNumber="7" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.IndexerDeclarationParameterFollowsComma1.NormalMethods1.this%int[,]%int[][]" LineNumber="9" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.IndexerDeclarationParameterFollowsComma1.NormalMethods1.this%short%int" LineNumber="19" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.IndexerDeclarationParameterFollowsComma1.NormalMethods1.this%long%int" LineNumber="30" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.IndexerDeclarationParameterFollowsComma1.NormalMethods1.this%bool%int%int" LineNumber="39" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.IndexerDeclarationParameterFollowsComma1.NormalMethods1.this%string%int%int" LineNumber="49" Rule="ParameterMustFollowComma" />
    </ExpectedViolations>
  </Test>

  <!-- If parameters are on separate lines, the first parameter must start on the line following the declaration. -->
  <Test Name="IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration">
    <TestCodeFile>IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%int%int" LineNumber="7" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%int%int%int" LineNumber="13" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%int%int%int" LineNumber="13" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%int%int%int" LineNumber="14" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%short%int[,,]%int" LineNumber="19" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%long%int%int" LineNumber="26" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%long%int%int" LineNumber="26" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%long%int%int" LineNumber="26" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%float%int%int%int" LineNumber="34" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%float%int%int%int" LineNumber="34" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%float%int%int%int" LineNumber="34" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%float%int%int%int" LineNumber="35" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%double%int%int%int[][]" LineNumber="40" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%double%int%int%int[][]" LineNumber="40" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.IndexerDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalMethods1.this%double%int%int%int[][]" LineNumber="40" Rule="ParameterMustFollowComma" />
    </ExpectedViolations>
  </Test>

  <!-- If parameters are on separate lines, the first parameter must start on the line following the declaration. -->
  <Test Name="IndexerDeclarationSpanningMultipleLines">
    <TestCodeFile>IndexerDeclarationSpanningMultipleLines.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.IndexerDeclarationSpanningMultipleLines1.NormalMethods1.this%int%int" LineNumber="7" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.IndexerDeclarationSpanningMultipleLines1.NormalMethods1.this%int%int" LineNumber="7" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.IndexerDeclarationSpanningMultipleLines1.NormalMethods1.this%int%int" LineNumber="7" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.IndexerDeclarationSpanningMultipleLines1.NormalMethods1.this%short%int" LineNumber="17" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.IndexerDeclarationSpanningMultipleLines1.NormalMethods1.this%long%int%int" LineNumber="23" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.IndexerDeclarationSpanningMultipleLines1.NormalMethods1.this%long%int%int" LineNumber="23" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.IndexerDeclarationSpanningMultipleLines1.NormalMethods1.this%long%int%int" LineNumber="23" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.IndexerDeclarationSpanningMultipleLines1.NormalMethods1.this%long%int%int" LineNumber="23" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.IndexerDeclarationSpanningMultipleLines1.NormalMethods1.this%double%int[,]%int" LineNumber="34" Rule="ParameterMustNotSpanMultipleLines" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the valid ways that the parameters can be placed.  -->
  <Test Name="DelegateDeclarationValidPlacement">
    <TestCodeFile>DelegateDeclarationValidPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.DelegateDeclarationValidPlacement1.KnownError.Delegate1" LineNumber="12" Rule="ClosingParenthesisMustBeOnLineOfOpeningParenthesis" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the placement of the opening parenthesis in a delegate declaration.  -->
  <Test Name="DelegateDeclarationOpeningParenthesisPlacement">
    <TestCodeFile>DelegateDeclarationOpeningParenthesisPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.DelegateDeclarationOpeningParenthesisPlacement1.NormalDelegates1.Delegate1" LineNumber="10" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.DelegateDeclarationOpeningParenthesisPlacement1.NormalDelegates1.Delegate2" LineNumber="13" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.DelegateDeclarationOpeningParenthesisPlacement1.NormalDelegates1.Delegate2" LineNumber="14" Rule="ClosingParenthesisMustBeOnLineOfOpeningParenthesis" />
      <Violation Section="Root.DelegateDeclarationOpeningParenthesisPlacement1.NormalDelegates1.Delegate3%int" LineNumber="17" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.DelegateDeclarationOpeningParenthesisPlacement1.NormalDelegates1.Delegate4%int" LineNumber="20" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
      <Violation Section="Root.DelegateDeclarationOpeningParenthesisPlacement1.NormalDelegates1.Delegate5%int" LineNumber="25" Rule="OpeningParenthesisMustBeOnDeclarationLine" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the placement of the closing parenthesis in a delegate declaration.  -->
  <Test Name="DelegateDeclarationClosingParenthesisPlacement">
  <TestCodeFile>DelegateDeclarationClosingParenthesisPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.DelegateDeclarationClosingParenthesisPlacement1.NormalDelegates1.Delegate1" LineNumber="9" Rule="ClosingParenthesisMustBeOnLineOfOpeningParenthesis" />
      <Violation Section="Root.DelegateDeclarationClosingParenthesisPlacement1.NormalDelegates1.Delegate2%int" LineNumber="12" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.DelegateDeclarationClosingParenthesisPlacement1.NormalDelegates1.Delegate3%int" LineNumber="16" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.DelegateDeclarationClosingParenthesisPlacement1.NormalDelegates1.Delegate4%int%int" LineNumber="21" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
      <Violation Section="Root.DelegateDeclarationClosingParenthesisPlacement1.NormalDelegates1.Delegate5%int%int" LineNumber="27" Rule="ClosingParenthesisMustBeOnLineOfLastParameter" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the placement of the comma between two parameters. -->
  <Test Name="DelegateDeclarationCommaPlacement">
    <TestCodeFile>DelegateDeclarationCommaPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.DelegateDeclarationCommaPlacement1.NormalDelegates1.Delegate1%int%int" LineNumber="7" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationCommaPlacement1.NormalDelegates1.Delegate1%int%int" LineNumber="8" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.DelegateDeclarationCommaPlacement1.NormalDelegates1.Delegate2%int%int" LineNumber="10" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationCommaPlacement1.NormalDelegates1.Delegate2%int%int" LineNumber="11" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.DelegateDeclarationCommaPlacement1.NormalDelegates1.Delegate3%int%int" LineNumber="16" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.DelegateDeclarationCommaPlacement1.NormalDelegates1.Delegate4%int%int%int" LineNumber="20" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.DelegateDeclarationCommaPlacement1.NormalDelegates1.Delegate4%int%int%int" LineNumber="22" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.DelegateDeclarationCommaPlacement1.NormalDelegates1.Delegate5%int%int" LineNumber="28" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
      <Violation Section="Root.DelegateDeclarationCommaPlacement1.NormalDelegates1.Delegate6%int%int" LineNumber="33" Rule="CommaMustBeOnSameLineAsPreviousParameter" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the start position of the parameter list. -->
  <Test Name="DelegateDeclarationParameterListStart">
    <TestCodeFile>DelegateDeclarationParameterListStart.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.DelegateDeclarationParameterListStart1.NormalDelegates1.Delegate1%int" LineNumber="9" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.DelegateDeclarationParameterListStart1.NormalDelegates1.Delegate2%int%int" LineNumber="13" Rule="ParameterListMustFollowDeclaration" />
      <Violation Section="Root.DelegateDeclarationParameterListStart1.NormalDelegates1.Delegate3%int%int" LineNumber="17" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationParameterListStart1.NormalDelegates1.Delegate4%int" LineNumber="23" Rule="ParameterListMustFollowDeclaration" />    </ExpectedViolations>
  </Test>

  <!-- Tests the starting position of a second or third parameter. -->
  <Test Name="DelegateDeclarationParameterFollowsComma">
    <TestCodeFile>DelegateDeclarationParameterFollowsComma.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.DelegateDeclarationParameterFollowsComma1.NormalDelegates1.Delegate1%int%int" LineNumber="7" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationParameterFollowsComma1.NormalDelegates1.Delegate1%int%int" LineNumber="9" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationParameterFollowsComma1.NormalDelegates1.Delegate2%int%int" LineNumber="14" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationParameterFollowsComma1.NormalDelegates1.Delegate3%int%int" LineNumber="20" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationParameterFollowsComma1.NormalDelegates1.Delegate4%int%int%int" LineNumber="26" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationParameterFollowsComma1.NormalDelegates1.Delegate5%int%int%int" LineNumber="33" Rule="ParameterMustFollowComma" />
    </ExpectedViolations>
  </Test>

  <!-- If parameters are on separate lines, the first parameter must start on the line following the declaration. -->
  <Test Name="DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration">
    <TestCodeFile>DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate1%int%int" LineNumber="7" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate2%int%int%int" LineNumber="10" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate2%int%int%int" LineNumber="10" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate2%int%int%int" LineNumber="11" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate3%int%int%int" LineNumber="13" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate4%int%int%int" LineNumber="17" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate4%int%int%int" LineNumber="17" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate4%int%int%int" LineNumber="17" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate5%int%int%int%int" LineNumber="20" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate5%int%int%int%int" LineNumber="20" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate5%int%int%int%int" LineNumber="20" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate5%int%int%int%int" LineNumber="21" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate6%int%int%int%int" LineNumber="23" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate6%int%int%int%int" LineNumber="23" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationSplitParameterMustStartOnLineAfterDeclaration1.NormalDelegates1.Delegate6%int%int%int%int" LineNumber="23" Rule="ParameterMustFollowComma" />
    </ExpectedViolations>
  </Test>

  <!-- If parameters are on separate lines, the first parameter must start on the line following the declaration. -->
  <Test Name="DelegateDeclarationSpanningMultipleLines">
    <TestCodeFile>DelegateDeclarationSpanningMultipleLines.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate1%int%int" LineNumber="7" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate1%int%int" LineNumber="7" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate1%int%int" LineNumber="7" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate2%int%int" LineNumber="10" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate2%int%int" LineNumber="10" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate2%int%int" LineNumber="10" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate3%int%int" LineNumber="13" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate3%int%int" LineNumber="13" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate3%int%int" LineNumber="13" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate4%int%int" LineNumber="18" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate5%int%int" LineNumber="23" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate6%int%int" LineNumber="28" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate7%int%int%int" LineNumber="31" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate7%int%int%int" LineNumber="31" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate7%int%int%int" LineNumber="31" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate7%int%int%int" LineNumber="31" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate8%int%int%int" LineNumber="34" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate8%int%int%int" LineNumber="34" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate8%int%int%int" LineNumber="34" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate8%int%int%int" LineNumber="34" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate9%int%int%int" LineNumber="37" Rule="ParametersMustBeOnSameLineOrSeparateLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate9%int%int%int" LineNumber="37" Rule="SplitParametersMustStartOnLineAfterDeclaration" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate9%int%int%int" LineNumber="37" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate9%int%int%int" LineNumber="37" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate10%int%int%int" LineNumber="43" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate11%int%int%int" LineNumber="49" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.DelegateDeclarationSpanningMultipleLines1.NormalDelegates1.Delegate12%int%int%int" LineNumber="55" Rule="ParameterMustNotSpanMultipleLines" />
    </ExpectedViolations>
  </Test>

  <!-- Tests the valid ways that the parameters can be placed.  -->
  <Test Name="MethodCallValidPlacement">
    <TestCodeFile>MethodCallValidPlacement.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.MethodCallValidPlacement1.KnownError.TestMethod" LineNumber="14" Rule="ClosingParenthesisMustBeOnLineOfOpeningParenthesis" />
    </ExpectedViolations>
  </Test>

  <!-- Tests multi-line parameters to method calls.  -->
  <Test Name="MethodCallMultiLineParameter">
    <TestCodeFile>MethodCallMultiLineParameter.cs</TestCodeFile>
    <Settings>
      <GlobalSettings>
        <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
        <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
      </GlobalSettings>
      <Analyzers>
        <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
          <Rules>
            <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterListMustFollowDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustFollowComma">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
            <Rule Name="ParameterMustNotSpanMultipleLines">
              <RuleSettings>
                <BooleanProperty Name="Enabled">True</BooleanProperty>
              </RuleSettings>
            </Rule>
          </Rules>
        </Analyzer>
      </Analyzers>
    </Settings>
    <ExpectedViolations>
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="11" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="18" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="24" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="26" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="33" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="33" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="36" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="36" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="43" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="53" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="60" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="73" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="77" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="88" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="88" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="93" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="93" Rule="ParameterMustFollowComma" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="103" Rule="ParameterMustNotSpanMultipleLines" />
      <Violation Section="Root.MethodCallMultiLineParameter.Class1.Method1" LineNumber="105" Rule="ParameterMustNotSpanMultipleLines" />
    </ExpectedViolations>
  </Test>
  
  <!-- Tests multi-line parameters to Constructor Initializer -->
  <Test Name="ConstructorInitializerSpanningMultipleLines">
        <TestCodeFile>ConstructorInitializerSpanningMultipleLines.cs</TestCodeFile>
        <Settings>
            <GlobalSettings>
                <StringProperty Name="MergeSettingsFiles">NoMerge</StringProperty>
                <BooleanProperty Name="RulesEnabledByDefault">False</BooleanProperty>
            </GlobalSettings>
            <Analyzers>
                <Analyzer AnalyzerId="StyleCop.CSharp.ReadabilityRules">
                    <Rules>
                        <Rule Name="OpeningParenthesisMustBeOnDeclarationLine">
                            <RuleSettings>
                                <BooleanProperty Name="Enabled">True</BooleanProperty>
                            </RuleSettings>
                        </Rule>
                        <Rule Name="ClosingParenthesisMustBeOnLineOfLastParameter">
                            <RuleSettings>
                                <BooleanProperty Name="Enabled">True</BooleanProperty>
                            </RuleSettings>
                        </Rule>
                        <Rule Name="ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
                            <RuleSettings>
                                <BooleanProperty Name="Enabled">True</BooleanProperty>
                            </RuleSettings>
                        </Rule>
                        <Rule Name="CommaMustBeOnSameLineAsPreviousParameter">
                            <RuleSettings>
                                <BooleanProperty Name="Enabled">True</BooleanProperty>
                            </RuleSettings>
                        </Rule>
                        <Rule Name="ParameterListMustFollowDeclaration">
                            <RuleSettings>
                                <BooleanProperty Name="Enabled">True</BooleanProperty>
                            </RuleSettings>
                        </Rule>
                        <Rule Name="ParameterMustFollowComma">
                            <RuleSettings>
                                <BooleanProperty Name="Enabled">True</BooleanProperty>
                            </RuleSettings>
                        </Rule>
                        <Rule Name="SplitParametersMustStartOnLineAfterDeclaration">
                            <RuleSettings>
                                <BooleanProperty Name="Enabled">True</BooleanProperty>
                            </RuleSettings>
                        </Rule>
                        <Rule Name="ParametersMustBeOnSameLineOrSeparateLines">
                            <RuleSettings>
                                <BooleanProperty Name="Enabled">True</BooleanProperty>
                            </RuleSettings>
                        </Rule>
                        <Rule Name="ParameterMustNotSpanMultipleLines">
                            <RuleSettings>
                                <BooleanProperty Name="Enabled">True</BooleanProperty>
                            </RuleSettings>
                        </Rule>
                    </Rules>
                </Analyzer>
            </Analyzers>
        </Settings>
        <ExpectedViolations>           
        </ExpectedViolations>
    </Test>    
</StyleCopTestDescription>
