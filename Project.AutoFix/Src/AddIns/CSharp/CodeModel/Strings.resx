<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CodeModelDocumentMismatch" xml:space="preserve">
    <value>The item to be inserted ({0}) is from a different document content.</value>
  </data>
  <data name="CodeModelError" xml:space="preserve">
    <value>A code model error has been introduced in document {0}.</value>
  </data>
  <data name="CodeModelErrorWithMessage" xml:space="preserve">
    <value>A code model error has been introduce in document {0}: {1}</value>
  </data>
  <data name="CodeModelTypeMismatch" xml:space="preserve">
    <value>The value {0} is of type {1}, but must be one of the following types: {2}</value>
  </data>
  <data name="CodeUnitCollectionIsReadOnly" xml:space="preserve">
    <value>The collection is read-only.</value>
  </data>
  <data name="DocumentMustBeCsDocument" xml:space="preserve">
    <value>The document must be of type CsDocument.</value>
  </data>
  <data name="DocumentRoot" xml:space="preserve">
    <value>document root</value>
  </data>
  <data name="ElementHeaderLineMustBeginWithTripleSlash" xml:space="preserve">
    <value>A element header line must begin with three forward slashes: ///</value>
  </data>
  <data name="ElementHeaderLineMustNotBeginWithQuadrupleSlash" xml:space="preserve">
    <value>An element header line must not being with more than three forward slashes in a row.</value>
  </data>
  <data name="ElementHeaderLineMustNotContainNewline" xml:space="preserve">
    <value>An element header line must not contain newline characters.</value>
  </data>
  <data name="ElementHeaderLineMustNotContainsTrailingWhitespace" xml:space="preserve">
    <value>An element header line must not contain trailing whitespace.</value>
  </data>
  <data name="ElementMustBeInParentsDocument" xml:space="preserve">
    <value>An element must be in the same document as its parent.</value>
  </data>
  <data name="EmptyElement" xml:space="preserve">
    <value>empty element</value>
  </data>
  <data name="InvalidFileHeaderElement" xml:space="preserve">
    <value>A file header may only contain whitespace, newlines, and single-line comments.</value>
  </data>
  <data name="InvalidNumberOfPasses" xml:space="preserve">
    <value>Invalid number of passes.</value>
  </data>
  <data name="ItemHasAlreadyBeenAddedToCollection" xml:space="preserve">
    <value>The item has already been added to the collection.</value>
  </data>
  <data name="ItemHasNotBeenAddedToACollection" xml:space="preserve">
    <value>The item has not yet been inserted into a document.</value>
  </data>
  <data name="LiteralExpressionDoesNotContainTypeToken" xml:space="preserve">
    <value>The LiteralExpression must contain a TypeToken.</value>
  </data>
  <data name="LiteralMustContainNonWhitespace" xml:space="preserve">
    <value>The text within a LiteralToken must not consist solely of whitespace characters.</value>
  </data>
  <data name="MultilineCommentMustBeginAndEndWithCommentSyntax" xml:space="preserve">
    <value>A multi-line comment must begin with /* and end with */</value>
  </data>
  <data name="MultilineCommentMustContainText" xml:space="preserve">
    <value>A multi-line comment must contain text.</value>
  </data>
  <data name="NoMatchingEndregion" xml:space="preserve">
    <value>Failed to find a matching #endregion directive for the #region.</value>
  </data>
  <data name="NoMatchingRegion" xml:space="preserve">
    <value>Failed to find a matching #region directive for the #endregion.</value>
  </data>
  <data name="ObjectInitializerAssignmentIsNotEquals" xml:space="preserve">
    <value>The AssignmentExpression must be of type Equals. Use the CreateEqualsExpression method to create an AssignmentExpression of the appropriate type.</value>
  </data>
  <data name="ObjectInitializerAssignmentLeftHandSideMustBeLiteral" xml:space="preserve">
    <value>The expression on the left-hand side of an AssignmentExpression with an ObjectInitializerExpression must be of type LiteralExpression.</value>
  </data>
  <data name="Root" xml:space="preserve">
    <value>Root</value>
  </data>
  <data name="RootInvalid" xml:space="preserve">
    <value>The filter Root property must be null or set to the current CodeUnit node.</value>
  </data>
  <data name="SingleLineCommentMustBeginWithDoubleSlash" xml:space="preserve">
    <value>A single-line comment must begin with two forward slashes: //</value>
  </data>
  <data name="SingleLineCommentMustNotContainNewline" xml:space="preserve">
    <value>A single-line comment must not contain newline characters.</value>
  </data>
  <data name="SingleLineCommentMustNotContainsTrailingWhitespace" xml:space="preserve">
    <value>A single-line comment must not contain trailing whitespace.</value>
  </data>
  <data name="SyntaxErrorInFile" xml:space="preserve">
    <value>A syntax error has been discovered in document {0} on line {1}.</value>
  </data>
  <data name="SyntaxErrorInFileWithMessage" xml:space="preserve">
    <value>A syntax error has been discovered in document {0} on line {1}: {2}</value>
  </data>
  <data name="ThrowOnAssert" xml:space="preserve">
    <value>An assert occured: {0}</value>
  </data>
  <data name="TripleSlashIsReservedForDocumentHeaders" xml:space="preserve">
    <value>The triple-slash comment style is reserved for documentation header lines.</value>
  </data>
  <data name="UnexpectedEndOfFile" xml:space="preserve">
    <value>Unexpected end of file encountered.</value>
  </data>
  <data name="ValueMustBeANumber" xml:space="preserve">
    <value>The value must be a number.</value>
  </data>
  <data name="ValueMustBeAString" xml:space="preserve">
    <value>The value must be a string.</value>
  </data>
</root>