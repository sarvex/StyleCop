<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Package.LanguageService</name>
  </assembly>
  <members>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.#ctor">
      <summary>Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Package.AuthoringScope" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.GetDataTipText(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
      <summary>Returns a string to be used for a tool tip based on the specified location.</summary>
      <returns>If successful, returns a string containing the text for the tool tip; otherwise, returns a null value.</returns>
      <param name="line">[in] The line in the source to look at for a tool tip.</param>
      <param name="col">[in] An offset within the <paramref name="line" /> to look at for a tool tip.</param>
      <param name="span">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> that describes the area over which the cursor can hover before the tool tip is dismissed from view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.GetDeclarations(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo,Microsoft.VisualStudio.Package.ParseReason)">
      <summary>Returns a list of declarations based on the specified reason for parsing.</summary>
      <returns>If successful returns a <see cref="T:Microsoft.VisualStudio.Package.Declarations" /> object; otherwise, returns a null value.</returns>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object that can be used to access the source.</param>
      <param name="line">[in] The line number where the parse operation started.</param>
      <param name="col">[in] The offset into the line where the parse operation started.</param>
      <param name="info">[in] A <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> structure containing information about the token at the specified position. </param>
      <param name="reason">[in] The <see cref="T:Microsoft.VisualStudio.Package.ParseReason" /> value describing what kind of parse operation was completed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.GetMethods(System.Int32,System.Int32,System.String)">
      <summary>Returns a list of overloaded method signatures for a specified method name.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Methods" /> object; otherwise, returns a null value.</returns>
      <param name="line">[in] The line number where the parse for method signatures started.</param>
      <param name="col">[in] The offset into the line where the parse for method signatures started.</param>
      <param name="name">[in] The name of the method for which to get permutations.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringScope.Goto(Microsoft.VisualStudio.VSConstants.VSStd97CmdID,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
      <summary>Returns a URI (Universal Resource Identifier) based on the current location in the source and the specified command.</summary>
      <returns>If successful, returns a string containing the URI; otherwise, returns a null value.</returns>
      <param name="cmd">[in] A value from the <see cref="T:Microsoft.VisualStudio.VSConstants.VSStd97CmdID" /> enumeration that determines what kind of destination URI must be returned. This is the command the user entered, typically from a context menu.</param>
      <param name="textView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object containing the text under the cursor.</param>
      <param name="line">[in] The line number containing the text under the cursor.</param>
      <param name="col">[in] The offset into the line containing the text under the cursor.</param>
      <param name="span">[out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object marking the selected text area for which the URI is determined.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.#ctor(Microsoft.VisualStudio.Package.ParseReason,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes the <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink" /> class.</summary>
      <param name="reason">[in] The reason for the parse given as a value from the <see cref="T:Microsoft.VisualStudio.Package.ParseReason" /> enumeration.</param>
      <param name="line">[in] The line number the parse started on.</param>
      <param name="col">[in] The offset into the line the parse started on.</param>
      <param name="maxErrors">[in] The maximum number of errors that are to be returned from the parser.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.AddError(System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.Package.Severity)">
      <summary>Adds an error in parsing message for later reporting.</summary>
      <param name="path">[in] The source file's path.</param>
      <param name="message">[in] The error message to report.</param>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> indicating what triggered the error (this is used to mark the bad code).</param>
      <param name="sev">[in] The severity of the error: a value from the <see cref="T:Microsoft.VisualStudio.Package.Severity" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.AddHiddenRegion(Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion)">
      <summary>Adds the specified <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" /> object to the internal hidden regions list.</summary>
      <param name="r">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" /> object to add to the list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.AddHiddenRegion(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Adds a new hidden region to the internal list based on the given <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</summary>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the span of code to be hidden.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.AutoExpression(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Adds the span of an expression to an internal list.</summary>
      <param name="expr">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object indicating the expression to add.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.BraceMatching">
      <summary>Indicates if brace matching should be done for a parse operation.</summary>
      <returns>Returns true if brace matching is to be done; otherwise, returns false (no brace matching allowed).</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.CodeSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>This adds a span of executable code to an internal list.</summary>
      <param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object indicating the section of code to add to the list.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.Column">
      <summary>Gets the column the parsing started on.</summary>
      <returns>Returns the offset into the line as passed to the <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink" /> constructor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.EndParameters(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Called to indicate the end of a method's parameter list.</summary>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object indicating the span of character or characters that denote the end of the parameter list.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.FindNames">
      <summary>Indicates whether identifiers are to be looked for.</summary>
      <returns>Returns true if searching of names is to be done; otherwise, returns false (name searching is not allowed).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.FoundMatchingBrace">
      <summary>Tracks if a matching pair of braces was added to the internal list.</summary>
      <returns>Returns true if at least one pair of matching braces was added to the internal list; otherwise, returns false, if no matching braces have been added.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.HiddenRegions">
      <summary>Indicates whether hidden regions should be processed during the parse operation.</summary>
      <returns>Returns true if hidden regions should be processed; otherwise, returns false (ignore hidden regions).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.Line">
      <summary>Returns the line the parsing operation started on.</summary>
      <returns>Returns the line the parse started on as passed to the <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink" /> constructor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.MatchPair(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32)">
      <summary>Called to add the spans of the two paired elements in an internal list.</summary>
      <param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the starting paired element.</param>
      <param name="endContext">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the ending paired element.</param>
      <param name="priorit y">[in] A priority value used to sort overlapping pairs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.MatchTriple(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32)">
      <summary>Called to add a matching set of three elements to an internal list.</summary>
      <param name="startSpan">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object indicating the starting element.</param>
      <param name="middleSpan">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object indicating the middle element.</param>
      <param name="endSpan">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> Span object indicating the ending element.</param>
      <param name="priority">[in] A priority value used to sort overlapping triples.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.MethodParameters">
      <summary>Indicates whether to process method parameters during the parse operation.</summary>
      <returns>Returns true if method parameters should be processed; otherwise, returns false (ignore method parameters).</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.NextParameter(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Called when parsing a method parameter list and the parameter separator character has just been parsed.</summary>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object indicating the parameter separator character.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.ProcessHiddenRegions">
      <summary>Indicates whether to update hidden regions.</summary>
      <returns>Returns true if any hidden regions have been added to the list; otherwise, returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.QualifyName(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
      <summary>Called to note the location of a member reference.</summary>
      <param name="selectorContext">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object indicating the selector (for example, "." or "-&gt;").</param>
      <param name="nameContext">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object indicating the member name.</param>
      <param name="name">[in] The member name as indicated by <paramref name="nameContext" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.AuthoringSink.Reason">
      <summary>Returns the reason the parse operation was started.</summary>
      <returns>Returns a value from the <see cref="T:Microsoft.VisualStudio.Package.ParseReason" /> enumeration.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.StartName(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
      <summary>Called when an identifier is parsed.</summary>
      <param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object indicating the location of the identifier.</param>
      <param name="name">[in] The name of the identifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.StartParameters(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Called at the start of a method's parameter list.</summary>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object indicating the character or characters that start the parameter list.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.CodeWindowManager">
      <summary>Wraps an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" /> object for use in a language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.#ctor(System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.COLORINDEX,Microsoft.VisualStudio.TextManager.Interop.COLORINDEX,System.Drawing.Color,System.Drawing.Color,Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS)">
      <summary>Initializes the <see cref="T:Microsoft.VisualStudio.Package.ColorableItem" /> class and accepts all the information needed to describe a colorable item.</summary>
      <param name="name">[in] The name of the colorable item. This can be used in the properties listing if you support customizing your own custom colors.</param>
      <param name="displayName">[in] The name of the colorable item that is displayed in the Fonts and Colors list of colors. This is the localized name.</param>
      <param name="foreColor">[in] The text's foreground color as specified by a value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" /> enumeration.</param>
      <param name="backColor">[in] The text's background color as specified by a value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" /> enumeration.</param>
      <param name="hiForeColor">[in] A <see cref="T:System.Drawing.Color" /> structure describing the foreground color in terms of red, green, blue components. This value can be Empty if high colors are not used. </param>
      <param name="hiBackColor">[in] A <see cref="T:System.Drawing.Color" /> structure describing the background color in terms of red, green, blue components. This value can be Empty if high colors are not used.</param>
      <param name="fontFlags">[in] A set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS" /> enumeration describing how the text is to be rendered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetCanonicalName(System.String@)">
      <summary>Gets the canonical name of a colorable item.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="name">[out] A string containing the canonical name of this colorable item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetColorData(System.Int32,System.UInt32@)">
      <summary>Get the specified high color foreground or background element.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="cdElement">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA" /> enumeration specifying which color element to retrieve.</param>
      <param name="crColor">[out] Returns a COLORREF object that contains the RGB values for the specified color element.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDefaultColors(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[])">
      <summary>Returns the foreground and background color for this colorable item.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="foreColor">[in, out] If not null, this is where the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" /> value for the text's foreground color is returned.</param>
      <param name="backColor">[in, out] If not null, this is where the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" /> value for the text's background color is returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDefaultFontFlags(System.UInt32@)">
      <summary>Returns the font attributes for this colorable item.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="fontFlags">[out] The set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDescription(System.String@)">
      <summary>Returns a description for this colorable item.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="desc">[out] A string containing a description.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDisplayName(System.String@)">
      <summary>Returns the name of this colorable item.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="name">[out] The name of the colorable item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetMergingPriority(System.Int32@)">
      <summary>Returns the priority this colorable item has when compared to other colorable items of the same name.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="priority">[out] A priority value, the higher it is, the more preferred this colorable item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Colorizer">
      <summary>This class implements the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer" /> interface and is used to support syntax highlighting in an editor.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CommentInfo.BlockEnd">
      <summary>Specifies the string of characters that define the end of a block comment.</summary>
      <returns>Returns the string of characters that define the end of a block comment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CommentInfo.BlockStart">
      <summary>Specifies the string of characters that define the start of a block comment.</summary>
      <returns>Returns the string of characters that define the start of a block comment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CommentInfo.LineStart">
      <summary>Specifies the string of characters that define the start of a line comment.</summary>
      <returns>Returns the string of characters that define the start of a line comment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CommentInfo.UseLineComments">
      <summary>Specifies whether line comments are supported.</summary>
      <returns>Returns true if line comments are support; otherwise, returns false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.CompletionSet">
      <summary>Represents an IntelliSense completion list that is displayed in the current text view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Completor">
      <summary>Wraps and applies multiple changes to a text view as a single operation.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.CompoundAction">
      <summary>Manages a group of edit operations that are treated as a single operation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundAction.Dispose">
      <summary>Deallocates any resources just before the <see cref="T:Microsoft.VisualStudio.Package.CompoundAction" /> object is destroyed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.CompoundViewAction">
      <summary>Manages multiple edit actions that are treated as a single operation, optimized for a text view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundViewAction.Abort"></member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundViewAction.Close"></member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundViewAction.Dispose"></member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundViewAction.FlushEditActions"></member>
    <member name="T:Microsoft.VisualStudio.Package.Declarations">
      <summary>Manages a list of declarations to be shown in an IntelliSense drop-down list.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.DefaultFieldValue">
      <summary>Associates a default value with a field name as defined in a code snippet template for a language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.#ctor(Microsoft.VisualStudio.Package.CodeWindowManager)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> class.</summary>
      <param name="mgr">[in] The <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object that uses this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Close">
      <summary>Closes down the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object so that its properties are no longer visible in the Properties window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.CountObjects(System.UInt32,System.UInt32@)">
      <summary>Returns the number of objects managed by this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="flags">[in] This is either <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_ALL" /> to count all objects, or <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED" /> to count only the selected objects.</param>
      <param name="pc">[out] Returns the number of objects.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Dispose">
      <summary>Cleans up the object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Dispose(System.Boolean)">
      <summary>Cleans up the object and its resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Finalize">
      <summary>Does final cleanup of the object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.GetCodeWindowManager">
      <summary>Retrieves the code window manager associated with this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.GetObjects(System.UInt32,System.UInt32,System.Object[])">
      <summary>Returns a list of objects managed by this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="flags">[in] This is either <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_ALL" /> to get all objects, or <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED" /> to get only the selected objects.</param>
      <param name="count">[in] The maximum number of objects to return.</param>
      <param name="ppUnk">[in, out] An array that is filled in with the objects to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.GetSource">
      <summary>Returns a <see cref="T:Microsoft.VisualStudio.Package.Source" /> object associated with this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.Source" /> object that is obtained from the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> class constructor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Refresh">
      <summary>Updates the Properties window with the latest property values.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentProperties.SelectObjects(System.UInt32,System.Object[],System.UInt32)">
      <summary>Called to manage the selection of multiple objects in the Properties window.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="sel">[in] The number of objects in the <paramref name="selobj" /> array.</param>
      <param name="selobj">[in] An array of objects returned from the <see cref="M:Microsoft.VisualStudio.Package.DocumentProperties.GetObjects(System.UInt32,System.UInt32,System.Object[])" /> method.</param>
      <param name="flags">[in] This is <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.SELOBJS_ACTIVATE_WINDOW" /> to select the objects in the array; otherwise, the objects are de-selected.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DocumentProperties.Visible">
      <summary>Determines if the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object is visible in the Properties window.</summary>
      <returns>If the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object is visible, returns true; otherwise, returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.#ctor(System.IServiceProvider,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> for the specified text buffer, text span, and file name.</summary>
      <param name="site">The <see cref="T:System.IServiceProvider" />.</param>
      <param name="buffer">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> text buffer.</param>
      <param name="markerType">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" /> of the marker.</param>
      <param name="span">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> of the buffer.</param>
      <param name="fileName">The name of the file in which the text is found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.Dispose">
      <summary>Recovers resources just before the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.Dispose(System.Boolean)">
      <summary>Recovers resources just before the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> object is destroyed.</summary>
      <param name="disposing">true if disposing the object just before destruction; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.ExecMarkerCommand(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32)">
      <summary>Executes a command on a specific marker within the text buffer.</summary>
      <returns>When implemented in derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="marker">The marker on which to execute the command.</param>
      <param name="item">The ID of the command to execute. The values should be taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.Finalize">
      <summary>Recovers resources just before the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.GetMarkerCommandInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32,System.String[],System.UInt32[])">
      <summary>Queries the marker for the command information.</summary>
      <returns>When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="marker">The marker to query.</param>
      <param name="item">The ID of the command to execute. The values should be taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
      <param name="text">The text of the marker command in the context menu.</param>
      <param name="commandFlags">[out] the command flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.String[])">
      <summary>Gets the tip text for the text marker that is displayed when the mouse hovers over the marker. </summary>
      <returns>The text of this task.</returns>
      <param name="marker">The marker for which to get the text.</param>
      <param name="tipText">The text to display.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DocumentTask.IsMarkerValid">
      <summary>Gets whether or not the marker has been set to invalid.</summary>
      <returns>Set to true if the marker has not been set to invalid, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.MarkerInvalidated">
      <summary>Called when the text associated with a marker is deleted by a user action. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnAfterMarkerChange(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker)">
      <summary>Signals that the marker position has changed. </summary>
      <returns>When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="marker">The marker that has changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnAfterSpanReload">
      <summary>Signals that the text under the marker has been altered but the marker has not been deleted. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnBeforeBufferClose">
      <summary>Sends notification that the text buffer is about to close. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnBufferSave(System.String)">
      <summary>Called when the buffer has been saved.</summary>
      <param name="fileName">The name of the file that was saved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnNavigate(System.EventArgs)">
      <summary>Loads the document associated with the error and jumps to the location of the error.</summary>
      <param name="e">[in] An <see cref="T:System.EventArgs" /> object (which in this case does not contain any information and used only as a placeholder in a delegate object).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnRemoved(System.EventArgs)">
      <summary>Called when this <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> object is removed from the Error List Options window.</summary>
      <param name="e">[in] An <see cref="T:System.EventArgs" /> object (which in this case does not contain any information and used only as a placeholder in a delegate object).</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DocumentTask.Site">
      <summary>Gets the service provider.</summary>
      <returns>The <see cref="T:System.IServiceProvider" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DocumentTask.Span">
      <summary>Gets the span where the error occurred.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> class constructor, if it is non-null. Otherwise, the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DocumentTask.TextLineMarker">
      <summary>Returns the text line marker object describing the location of the error.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> class constructor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DropDownMember.#ctor(System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> class.</summary>
      <param name="label">[in] A string representing the text to be shown in the combo box.</param>
      <param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that specifies the location in the source this entry represents.</param>
      <param name="glyph">[in] An index into an image list to a glyph that is shown with this entry in the combo box.</param>
      <param name="fontAttribute">[in] A collection flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR" /> enumeration describing how to render the label in the combo box.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DropDownMember.CompareTo(System.Object)">
      <summary>Compares this object to the specified object.</summary>
      <returns>1 if this object is greater than the specified object, 0 if this object equals the specified object, -1 if this object is less than the specified object.</returns>
      <param name="obj">[in] The <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object to compare to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DropDownMember.CompareTo(System.Object,System.StringComparison)">
      <summary>Compares one <see cref="Overload:Microsoft.VisualStudio.Package.DropDownMember.CompareTo" /> to another with the given string comparison.</summary>
      <returns>If <paramref name="obj" /> is a <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" />, the return value of a string comparison of the two; otherwise -1.</returns>
      <param name="obj">The object to which to do the comparison.</param>
      <param name="stringComparison">
        <see cref="T:System.StringComparison" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DropDownMember.Equals(System.Object)">
      <summary>Determines whether this object equals the specified object.</summary>
      <returns>Returns true if this object equals the specified object; otherwise, returns false.</returns>
      <param name="obj">[in] The <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object to compare to.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DropDownMember.FontAttr">
      <summary>Gets or sets the font attributes to use for rendering the entry's text.</summary>
      <returns>Flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR" /> enumeration.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DropDownMember.GetHashCode">
      <summary>Returns a hash code value for this <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object.</summary>
      <returns>Returns a value that can be used as a hash code to represent this object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DropDownMember.Glyph">
      <summary>Gets or sets the image index to associate with the entry's text.</summary>
      <returns>The image index.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DropDownMember.Label">
      <summary>Gets or sets the text to be displayed.</summary>
      <returns>The text to be displayed.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DropDownMember.op_Equality(Microsoft.VisualStudio.Package.DropDownMember,Microsoft.VisualStudio.Package.DropDownMember)">
      <summary>Determines if two <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> objects are equal.</summary>
      <returns>true if the two <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> objects are equal, otherwise false.</returns>
      <param name="m1">[in] The first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object to compare.</param>
      <param name="m2">[in] The second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object to compare.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DropDownMember.op_GreaterThan(Microsoft.VisualStudio.Package.DropDownMember,Microsoft.VisualStudio.Package.DropDownMember)">
      <summary>Determines whether the first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> is greater than the second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" />.</summary>
      <returns>true if the first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object is greater than the second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object, otherwise false.</returns>
      <param name="m1">[in] The first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object to compare.</param>
      <param name="m2">[in] The second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object to compare.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DropDownMember.op_Inequality(Microsoft.VisualStudio.Package.DropDownMember,Microsoft.VisualStudio.Package.DropDownMember)">
      <summary>Determines if two <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> objects are not equal.</summary>
      <returns>true if the two <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> objects are not equal, otherwise false.</returns>
      <param name="m1">[in] The first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object to compare.</param>
      <param name="m2">[in] The second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object to compare.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.DropDownMember.op_LessThan(Microsoft.VisualStudio.Package.DropDownMember,Microsoft.VisualStudio.Package.DropDownMember)">
      <summary>Determines whether the first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object is less than the second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object.</summary>
      <returns>true if the first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object is less than the second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object, otherwise false.</returns>
      <param name="m1">[in] The first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object to compare.</param>
      <param name="m2">[in] The second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object to compare.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DropDownMember.Span">
      <summary>Gets or sets the text span in the source file that corresponds to the entry's text.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.EditArray">
      <summary>Merges multiple edit operations to create a single operation.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.EditorControl">
      <summary>Handles the editor window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.EditorFactory">
      <summary>This class provides a default editor factory implementation that hosts the Visual Studio core editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo.Guid">
      <summary>Gets or sets the GUID of the editor.</summary>
      <returns>The GUID of the editor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo.Name">
      <summary>Gets or sets the name of the editor.</summary>
      <returns>The name of the editor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo.Next">
      <summary>Gets or sets the next <see cref="T:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo" /> in the series.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo.Priority">
      <summary>Gets or sets the priority of the editor.</summary>
      <returns>The relative priority of the editor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditSpan.#ctor(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.EditSpan" /> class.</summary>
      <param name="toReplace">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the span to affect.</param>
      <param name="insertText">[in] The text to insert/replace.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditSpan.LengthOfLastLine">
      <summary>Returns the length of the last line in the replacement text.</summary>
      <returns>Returns the number of characters on the last line of the replacement text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditSpan.LineCount">
      <summary>Returns the number of lines in the replacement text.</summary>
      <returns>Returns the number of lines in the replacement text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditSpan.Span">
      <summary>Determines the span to be replaced.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the span to be replaced.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditSpan.Text">
      <summary>Determines the replacement text.</summary>
      <returns>Returns a string containing the text to replace with.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ExpansionFunction">
      <summary>Provides support for expansion functions in code snippets for a language service.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ExpansionProvider">
      <summary>Provides support for inserting code snippets into source code.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.FilePathUtilities">
      <summary>Static utilities for getting and setting file paths.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.IndentingStyle">
      <summary>Represents the different indenting styles supported by language services.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.IndentingStyle.None">
      <summary>Pressing Enter inserts a new line and causes the caret to always move to the beginning of the new line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.IndentingStyle.Block">
      <summary>Pressing Enter inserts a new line and causes the caret to move to the same position as the first non-whitespace character on the previous line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.IndentingStyle.Smart">
      <summary>Pressing Enter inserts a new line and causes the caret to either move to the same position as the first non-whitespace character on the previous line or to indent or outdent automatically depending on the character at the end of the previous line. For example, in C#, pressing Enter after a "{" causes a new line to be inserted and cursor to be indented properly. In addition, the "{" may be moved to its own line. If Enter is pressed after a "}", however, a new line is entered and the caret is moved out one level of indentation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.IScanner.ScanTokenAndProvideInfoAboutIt(Microsoft.VisualStudio.Package.TokenInfo,System.Int32@)">
      <summary>Parses the next language token from the current line and returns information about it.</summary>
      <returns>Returns true if a token was parsed from the current line and information returned; otherwise, returns false indicating no more tokens on the current line.</returns>
      <param name="tokenInfo">[in, out] The <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> structure to be filled in.</param>
      <param name="state">[in, out] The scanner's current state value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.IScanner.SetSource(System.String,System.Int32)">
      <summary>Sets the line to be parsed.</summary>
      <param name="source">[in] The line to be tokenized.</param>
      <param name="offset">[in] The character offset into the line to start parsing. You must pay attention to this value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences" /> class (default initialization only).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.#ctor(System.IServiceProvider,System.Guid,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences" /> class (this is the preferred method).</summary>
      <param name="site">[in] An <see cref="T:System.IServiceProvider" /> object supplying the service provider. This value cannot be null.</param>
      <param name="langSvc">[in] The GUID of the language service these preferences are associated with.</param>
      <param name="name">[in] The name of the language service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.Apply">
      <summary>Applies all changes made to the preferences.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.AutoListMembers">
      <summary>Gets or sets whether members are automatically listed as part of IntelliSense support.</summary>
      <returns>true if a members list should be shown for auto-completion, otherwise false = the list is not to be shown).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.AutoOutlining">
      <summary>Gets or sets whether or not auto-outlining is supported outlining (this requires parser support for hidden regions).</summary>
      <returns>true if auto-outlining is supported, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.CodeSenseDelay">
      <summary>Gets or sets the number of milliseconds the user must hold the cursor over an identifier before initiating any IntelliSense operation.</summary>
      <returns>The number of milliseconds of delay.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.CutCopyBlankLines">
      <summary>Gets or sets whether to include spaces on blank lines when cutting and copying.</summary>
      <returns>true if blanks are to be preserved while cutting and copying, otherwise false, i.e., all spaces on a blank line are lost when cutting or copying.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.Dispose">
      <summary>Cleans up any allocated resources before the object is destroyed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableAsyncCompletion">
      <summary>Gets or sets if background parsing is supported.</summary>
      <returns>true if background parsing is supported, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableCodeSense">
      <summary>Gets or sets whether or not IntelliSense is supported.</summary>
      <returns>true if at least one IntelliSense operation is supported, otherwise false = no IntelliSense operation is supported.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableCommenting">
      <summary>Gets or sets whether or not blocks of code can be commented and uncommented.</summary>
      <returns>true if blocks of code can be commented and uncommented with a single operation, otherwise false = commenting blocks in a single operation is not supported.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableFormatSelection">
      <summary>Gets or sets whether or not code can be formatted.</summary>
      <returns>true if the code can be formatted, otherwise false = no automatic formatting.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableLeftClickForURLs">
      <summary>Gets or sets whether or not URLs in the code can be navigated to by a simple click.</summary>
      <returns>true if URLs can be navigated with a single click, otherwise false = either URLs cannot be clicked on or the control key must be held down while clicking.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableMatchBraces">
      <summary>Gets or sets whether or not matching braces are supported.</summary>
      <returns>true if matching braces are supported, otherwise false. </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableMatchBracesAtCaret">
      <summary>Gets or sets whether or not matching braces can be shown while typing a matching brace.</summary>
      <returns>true if matching braces can be shown, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableQuickInfo">
      <summary>Gets or sets whether or not the IntelliSense Quick Info operation is supported.</summary>
      <returns>true if Quick Info is supported, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableShowMatchingBrace">
      <summary>Gets or sets whether or not the text included in the span of the matching pair is shown in the status bar.</summary>
      <returns>true if the text included in the matching pair span can be shown, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetBooleanValue(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
      <summary>Obtains a boolean value from the specified registry entry.</summary>
      <returns>rue if the registry entry exists and contains a non-zero value or the word "True" (case-insensitive comparison), false if the registry entry exists and contains a zero value or the word "False" (case-insensitive comparison). Otherwise, returns the default value specified in <paramref name="def" />. Note: if the registry entry is a string, then any string other than "True" or "False" throws a <see cref="T:System.FormatException" />.</returns>
      <param name="key">[in] The <see cref="T:Microsoft.Win32.RegistryKey" /> object representing the desired registry subkey.</param>
      <param name="name">[in] The name of the registry entry for which to get the value.</param>
      <param name="def">[in] The default value to use if the registry entry is not found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetIntegerValue(Microsoft.Win32.RegistryKey,System.String,System.Int32)">
      <summary>Gets an integer value from the specified registry entry.</summary>
      <returns>The integer value stored in the registry entry if the registry entry exists, otherwise <paramref name="def" /> if the registry entry does not exist. If the registry entry is a string, then the string is evaluated as a number.</returns>
      <param name="key">[in] The <see cref="T:Microsoft.Win32.RegistryKey" /> object representing the desired registry subkey.</param>
      <param name="name">[in] The name of the registry entry for which to get the value.</param>
      <param name="def">[in] The default value to use if the registry entry is not found.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetLanguagePreferences">
      <summary>Gets the modifiable user language settings from Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetSite">
      <summary>Gets the service provider.</summary>
      <returns>The <see cref="T:System.IServiceProvider" /> object that was passed to the constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.HideAdvancedMembers">
      <summary>Gets or sets whether or not advanced members are hidden in the IntelliSense members list.</summary>
      <returns>true if advanced members are hidden, otherwise false = show all members.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.HighlightMatchingBraceFlags">
      <summary>Gets or sets the flags for highlighting matching braces.</summary>
      <returns>One of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop._HighlightMatchingBraceFlags" /> values.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.IndentSize">
      <summary>Gets or sets the number of spaces to indent when formatting source.</summary>
      <returns>The number of spaces to use for tab positions while formatting.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.IndentStyle">
      <summary>Gets or sets the style used for formatting sections of text.</summary>
      <returns>A value from the <see cref="T:Microsoft.VisualStudio.Package.IndentingStyle" /> enumeration.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.Init">
      <summary>Initializes <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.InitMachinePreferences(Microsoft.Win32.RegistryKey,System.String)">
      <summary>Gets language service-specific settings from the registry.</summary>
      <param name="key">[in] The <see cref="T:Microsoft.Win32.RegistryKey" /> object representing the desired base registry subkey.</param>
      <param name="name">[in] The name of the registry subkey containing the desired registry entries.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.InitUserPreferences(Microsoft.Win32.RegistryKey,System.String)">
      <summary>Gets user-modifiable settings.</summary>
      <param name="key">[in] A <see cref="T:Microsoft.Win32.RegistryKey" /> object representing the desired base registry subkey.</param>
      <param name="name">[in] The name of the registry subkey containing the user settings.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.InsertTabs">
      <summary>Gets or sets whether or not to insert tabs instead of spaces when formatting sections of text.</summary>
      <returns>true if tabs should be inserted, otherwise false = spaces should be inserted.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.LanguageName">
      <summary>Gets or sets the name the language service is registered under.</summary>
      <returns>The name of the language or null if the name was not set.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.LineNumbers">
      <summary>Gets or sets whether or not line numbers are to be shown.</summary>
      <returns>true if line numbers are to be shown, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.MaxErrorMessages">
      <summary>Gets or sets the maximum number of error messages that can be shown at any one time.</summary>
      <returns>The maximum number of error messages that can be shown.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.MaxRegionTime">
      <summary>Gets or sets the maximum region time.</summary>
      <returns>The maximum region time.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnRegisterMarkerType(System.Int32)">
      <summary>Called when a new marker type is registered with Visual Studio.</summary>
      <param name="iMarkerType">[in] The ID of the marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnRegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called when a view is registered.</summary>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface representing the view that has been registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnReplaceAllInFilesBegin">
      <summary>Called when the Replace All in Files operation has begun.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnReplaceAllInFilesEnd">
      <summary>Called when the Replace All In Files operation has ended.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnUnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called when a view is closed.</summary>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface representing the view that has been closed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnUserPreferencesChanged2(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2[])">
      <summary>Called when a user preference has been changed.</summary>
      <param name="viewPrefs">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2" /> structure describing user view preferences.</param>
      <param name="framePrefs">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2" /> structure describing user frame-oriented preferences.</param>
      <param name="langPrefs">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2" /> structure describing user language service-specific preferences.</param>
      <param name="fontColorPrefs">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2" /> structure describing user font and color preferences.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.ParameterInformation">
      <summary>Gets or sets whether or not the IntelliSense method tip operation is supported.</summary>
      <returns>true if the method tip operation is supported, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.ShowNavigationBar">
      <summary>Gets or sets whether or not drop-down bars are to be shown.</summary>
      <returns>true if drop-down bars can be shown, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.Site">
      <summary>Gets or sets the service provider.</summary>
      <returns>An <see cref="T:System.IServiceProvider" /> object or null if the service provider was not set.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.TabSize">
      <summary>Gets or sets the number of spaces a single tab covers.</summary>
      <returns>The number of spaces in a tab character.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.VirtualSpace">
      <summary>Gets or sets whether or not the editor should assume spaces at the end of all lines.</summary>
      <returns>true if each line is considered to have virtual spaces at the end, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.WordWrap">
      <summary>Gets or sets whether or not word wrapping is enabled.</summary>
      <returns>true if word wrapping is enabled, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.WordWrapGlyphs">
      <summary>Gets or sets whether or not a glyph should be shown for a line that is word-wrapped.</summary>
      <returns>true if the glyph should be shown, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.AbortBackgroundParse"></member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.AddCodeWindowManager(Microsoft.VisualStudio.Package.CodeWindowManager)">
      <summary>Adds a code window manager to the language service.</summary>
      <param name="m">[in] An instance of the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.BeginInvoke(System.Delegate,System.Object[])">
      <summary>Invokes a method on another thread.</summary>
      <returns>If successful, returns an <see cref="T:System.IAsyncResult" /> object; otherwise, returns a null value if the invoke operation failed.</returns>
      <param name="method">[in] The method to invoke.</param>
      <param name="args">[in] The possible arguments to the method being invoked.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.BeginParse(Microsoft.VisualStudio.Package.ParseRequest,Microsoft.VisualStudio.Package.ParseResultHandler)">
      <summary>Starts a parse operation on a background thread.</summary>
      <param name="request">[in] The <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> object containing the parameters of the parse operation.</param>
      <param name="handler">[in] The <see cref="T:Microsoft.VisualStudio.Package.ParseResultHandler" /> that is called when the parsing is complete.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateCodeWindowManager(Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow,Microsoft.VisualStudio.Package.Source)">
      <summary>Instantiates a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> class.</summary>
      <returns>If successful, returns an instance of a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> class; otherwise, returns a null value.</returns>
      <param name="codeWindow">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" /> object representing a code window.</param>
      <param name="source">[in] A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object, representing the source file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateDocumentProperties(Microsoft.VisualStudio.Package.CodeWindowManager)">
      <summary>Instantiates a <see cref="T:Microsoft.Office.Core.DocumentProperties" /> class.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.Office.Core.DocumentProperties" /> object; otherwise, returns a null value.</returns>
      <param name="mgr">[in] A <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object that the document properties can refer to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateDropDownHelper(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Instantiates a <see cref="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars" /> class.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars" /> object; otherwise, returns a null value.</returns>
      <param name="forView">[in] an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> representing the text view receiving the Navigation bar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateExpansionFunction(Microsoft.VisualStudio.Package.ExpansionProvider,System.String)">
      <summary>Instantiates an <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction" /> class.</summary>
      <returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction" /> object; otherwise, returns a null value.</returns>
      <param name="provider">[in] The <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> that is to use the <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction" />.</param>
      <param name="functionName">[in] The name of the function the <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction" /> represents.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateExpansionProvider(Microsoft.VisualStudio.Package.Source)">
      <summary>Instantiates an <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> class.</summary>
      <returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> object; otherwise, returns a null value.</returns>
      <param name="src">[in] The <see cref="T:Microsoft.VisualStudio.Package.Source" /> representing the source file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateParseRequest(Microsoft.VisualStudio.Package.Source,System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo,System.String,System.String,Microsoft.VisualStudio.Package.ParseReason,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Creates a request to satisfy the given reason for parsing that is then passed on to the parser.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> object; otherwise, returns a null value.</returns>
      <param name="s">[in] The <see cref="T:Microsoft.VisualStudio.Package.Source" /> object containing the source file.</param>
      <param name="line">[in] The line number to start parsing on.</param>
      <param name="idx">[in] The character index in the line where parsing starts.</param>
      <param name="info">[in] A <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> structure that is to be filled in by the parsing operation for each token.</param>
      <param name="sourceText">[in] The text to be parsed. This contains the entire source file's text.</param>
      <param name="fname">[in] The file name of the source file. Can be null or empty.</param>
      <param name="reason">[in] The <see cref="T:Microsoft.VisualStudio.Package.ParseReason" /> describing why the parse operation is being invoked.</param>
      <param name="view">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object containing the text buffer from which the source was obtained.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateSource(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Instantiates a <see cref="T:Microsoft.VisualStudio.Package.Source" /> class.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Source" /> object; otherwise, returns a null value.</returns>
      <param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer that the <see cref="T:Microsoft.VisualStudio.Package.Source" /> object represents.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateViewFilter(Microsoft.VisualStudio.Package.CodeWindowManager,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Instantiates a <see cref="T:Microsoft.VisualStudio.Package.ViewFilter" /> class.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.ViewFilter" /> object; otherwise, returns a null value.</returns>
      <param name="mgr">[in] The <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object to associate with this view filter.</param>
      <param name="newView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object that is to receive the new view filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.CurFileExtensionFormat(System.String)">
      <summary>Returns the index into the file extension list that matches the extension of the specified file name.</summary>
      <returns>If successful, returns a zero-based index into the file extension list that is returned from <see cref="M:Microsoft.VisualStudio.Package.LanguageService.GetFormatFilterList" />; otherwise, returns -1 to indicate the extension is not in the file extension list.</returns>
      <param name="fileName">[in] The file name from which to get the extension to look for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.DispatchCommand(System.Guid,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Called to execute the specified command.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="cmdGuid">[in] The GUID of the command to execute.</param>
      <param name="cmdId">[in] The ID of the command to execute.</param>
      <param name="pvaIn">[in] A pointer to possible parameters for the command.</param>
      <param name="pvaOut">[out] A pointer to a place to return the results of the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.Dispose">
      <summary>Called when the language service object is being destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.EndInvoke(System.IAsyncResult)">
      <summary>Retrieves the result of an asynchronous call started by <see cref="M:Microsoft.VisualStudio.Package.LanguageService.BeginInvoke(System.Delegate,System.Object[])" />.</summary>
      <returns>Returns an object representing the return value from the method called by <see cref="M:Microsoft.VisualStudio.Package.LanguageService.BeginInvoke(System.Delegate,System.Object[])" />.</returns>
      <param name="result">[in] The <see cref="T:System.IAsyncResult" /> object returned by <see cref="M:Microsoft.VisualStudio.Package.LanguageService.BeginInvoke(System.Delegate,System.Object[])" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetCodeWindowManager(Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow,Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager@)">
      <summary>Instantiates a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> class.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="codeWindow">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" /> with which to associate a new <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object.</param>
      <param name="mgr">[out] The new <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetCodeWindowManagerForSource(Microsoft.VisualStudio.Package.Source)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object associated with the specified <see cref="T:Microsoft.VisualStudio.Package.Source" /> object.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object; otherwise, returns a null value indicating the specified source is not associated with a particular <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object managed by this language service.</returns>
      <param name="src">[in] The <see cref="T:Microsoft.VisualStudio.Package.Source" /> object for which to get the associated <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetCodeWindowManagerForView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> associated with the specified <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object; otherwise, returns a null value indicating there is no associated <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object for the given <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object.</returns>
      <param name="view">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object for which to get the associated <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetColorableItem(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem@)">
      <summary>Returns the requested <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem" /> object.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="index">[in] A zero-based index into the list of colorable items maintained by the language service.</param>
      <param name="item">[out] Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetColorizer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Iinstantiates a <see cref="T:Microsoft.VisualStudio.Package.Colorizer" /> class.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Colorizer" /> object; otherwise, returns a null value.</returns>
      <param name="buffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object representing the buffer of text to colorize.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetColorizer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsColorizer@)">
      <summary>Returns the colorizer associated with a <see cref="T:Microsoft.VisualStudio.Package.Source" /> object that contains the given <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="buffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object representing the buffer of text to colorize.</param>
      <param name="result">[out] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer" /> object representing the colorizer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetFileExtensions(System.String@)">
      <summary>Returns a string containing the file extensions associated with this language.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="extensions">[out] Returns the extensions for this language.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetFormatFilterList">
      <summary>Returns a list of file extension filters suitable for a Save As dialog box.</summary>
      <returns>If successful, returns a string containing the file extension filters; otherwise, returns an empty string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetImageList">
      <summary>Returns an image list containing glyphs associated with the language service.</summary>
      <returns>If successful, returns an <see cref="T:System.Windows.Forms.ImageList" /> object; otherwise, returns a null value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetItemCount(System.Int32@)">
      <summary>Returns the number of custom colorable items supported by the language service.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="count">[out] The number of custom colorable items available.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetIVsDebugger">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugger" /> object representing the currently available debugger in order to listen for debugger events.</summary>
      <returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugger" /> object; otherwise, returns a null value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetIVsTextMacroHelperIfRecordingOn">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper" /> object if macro recording is turned on.</summary>
      <returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper" /> object; otherwise, returns a null value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLanguageID(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.Guid@)">
      <summary>Returns the language GUID of the language service.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> containing the source for which to get the language id.</param>
      <param name="line">[in] The line index into the buffer to the source for which to get the language.</param>
      <param name="col">[in] The character position in the line.</param>
      <param name="langId">[out] Returns the GUID of the language for the associated source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLanguageName(System.String@)">
      <summary>Returns the name of the language this language service handles.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="name">[out] Returns the name of the language.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLanguagePreferences">
      <summary>Returns a <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences" /> object for this language service.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences" /> object; otherwise, returns a null value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLanguageServiceGuid">
      <summary>Returns the GUID of the language service.</summary>
      <returns>Always returns the GUID of the language service.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLocationOfName(System.String,System.String@,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Obsolete method that always returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
      <returns>Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
      <param name="name">OBSOLETE</param>
      <param name="pbstrMkDoc">OBSOLETE</param>
      <param name="spans">OBSOLETE</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetNameOfLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.String@,System.Int32@)">
      <summary>Returns the name of the enclosing element that contains the given position.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the location is not within a named entity or returns an error code.</returns>
      <param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> holding the source file.</param>
      <param name="line">[in] The desired line in the buffer.</param>
      <param name="col">[in] The desired offset on the line in the buffer.</param>
      <param name="name">[out] The name of the enclosing element.</param>
      <param name="lineOffset">[out] The offset from the start of the enclosing element to the given line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetParseResult">
      <summary>Gets the result of the parse operation.</summary>
      <returns>
        <see cref="T:System.IAsyncResult" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetProximityExpressions(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR@)">
      <summary>Returns a list of expressions to be evaluated and shown in the Autos window, for a given span of lines.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if there are no expressions; otherwise, returns an error code.</returns>
      <param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> holding the source file.</param>
      <param name="line">[in] The first line of the span to examine for expressions.</param>
      <param name="col">[in] The offset on the first line to start looking for expressions.</param>
      <param name="cLines">[in] The number of lines to examine.</param>
      <param name="ppEnum">[out] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR" /> object that contains the list of expressions to examine. Return a null value to indicate no expressions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetScanner(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Returns a single instantiation of a parser.</summary>
      <returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.Package.IScanner" /> object; otherwise, returns a null value.</returns>
      <param name="buffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> representing the lines of source to parse.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetService(System.Type)">
      <summary>Returns a service object that can be cast to a specific interface.</summary>
      <returns>If successful, returns an object that can be cast to a desired interface; otherwise, returns a null value (the service does not exist or is not available).</returns>
      <param name="serviceType">[in] The GUID of the service to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSite(System.Guid@,System.IntPtr@)">
      <summary>Returns an unmarshaled pointer to a requested interface.</summary>
      <param name="iid">[in] The GUID of the desired interface.</param>
      <param name="ptr">[out] Returns an unmarshaled interface pointer or a null value if the interface is not available.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSource(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Returns an existing <see cref="T:Microsoft.VisualStudio.Package.Source" /> object that contains the specified buffer of source.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Source" /> object; otherwise, returns a null value (there is no <see cref="T:Microsoft.VisualStudio.Package.Source" /> object in this language service that controls that set of source lines).</returns>
      <param name="buffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object containing the lines of source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSource(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Returns an existing <see cref="T:Microsoft.VisualStudio.Package.Source" /> object that contains the source file shown in the specified text view.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Source" /> object; otherwise, returns a null value (there is no <see cref="T:Microsoft.VisualStudio.Package.Source" /> object in this language service that controls the set of source lines shown in the specified view).</returns>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object that displays the source file for which to get the <see cref="T:Microsoft.VisualStudio.Package.Source" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSource(System.String)">
      <summary>Returns an existing <see cref="T:Microsoft.VisualStudio.Package.Source" /> object given a file name.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Source" /> object; otherwise, returns a null value (there is no <see cref="T:Microsoft.VisualStudio.Package.Source" /> object in this language service that represents the specified file name).</returns>
      <param name="fname">[in] The file name for which to find the <see cref="T:Microsoft.VisualStudio.Package.Source" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSources">
      <summary>Returns a collection of <see cref="T:Microsoft.VisualStudio.Package.Source" /> objects maintained by the language service.</summary>
      <returns>Always returns an <see cref="T:System.Collections.IEnumerable" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.Initialize">
      <summary>Called to initialize the language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.Invoke(System.Delegate,System.Object[])">
      <summary>Called to invoke a task specified by the given delegate.</summary>
      <returns>Returns an <see cref="T:System.IAsyncResult" /> object or null if the invoke operation failed.</returns>
      <param name="method">[in] The method to invoke as represented by a <see cref="T:System.Delegate" /> object.</param>
      <param name="args">[in] An array of possible arguments for the method.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguageService.InvokeRequired">
      <summary>Determines if a method must be invoked across a thread boundary.</summary>
      <returns>Returns true if a method must be invoked across thread boundaries; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguageService.IsActive">
      <summary>Determines whether the language service is connected to the current view and therefore is active.</summary>
      <returns>Returns true if the currently active view belongs to this language service; otherwise, returns false, the language service is not currently active.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguageService.IsDebugging">
      <summary>Determines if the debugger is active.</summary>
      <returns>This property returns true if the debugger is active; otherwise, returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.IsMacroRecordingOn">
      <summary>Called to determine if macro recording is turned on.</summary>
      <returns>Returns true if macro recording is on; otherwise, returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.IsMappedLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32)">
      <summary>Called to determine if the specified location in the given source file references code in another file.</summary>
      <returns>If the position in the source file is mapped to another file, return <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.</returns>
      <param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> containing the source file.</param>
      <param name="line">[in] The line in the buffer to locate.</param>
      <param name="col">[in] The offset into the line to locate.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguageService.IsParsing">
      <summary>Determines if a background parse is in progress.</summary>
      <returns>Returns true if a background parsing operation is running; otherwise, returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.IsSourceOpen(Microsoft.VisualStudio.Package.Source)">
      <summary>Determines whether or not the source file is open.</summary>
      <returns>true if the file is a member of the sources owned by this service; otherwise false.</returns>
      <param name="src"> The source file.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguageService.LastActiveTextView">
      <summary>Returns the last active text view associated with this language service.</summary>
      <returns>Returns the last active text view as represented by an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface; otherwise, returns a null value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguageService.MainThreadId">
      <summary>Returns the id of the thread this language service is running on.</summary>
      <returns>Returns a thread id.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.Microsoft#VisualStudio#TextManager#Interop#IVsFormatFilterProvider#CurFileExtensionFormat(System.String,System.UInt32@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.Microsoft#VisualStudio#TextManager#Interop#IVsFormatFilterProvider#GetFormatFilterList(System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.Microsoft#VisualStudio#TextManager#Interop#IVsFormatFilterProvider#QueryInvalidEncoding(System.UInt32,System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.Microsoft#VisualStudio#TextManager#Interop#IVsLanguageContextProvider#UpdateLanguageContext(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Object)"></member>
    <member name="P:Microsoft.VisualStudio.Package.LanguageService.Name">
      <summary>Returns the name of the language (for example, "C++" or "HTML").</summary>
      <returns>Returns a string containing the name of the language. This must return the same name the language service was registered with in Visual Studio.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnActiveViewChanged(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called when the current view has changed to a different view.</summary>
      <param name="textView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the new current view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnCaretMoved(Microsoft.VisualStudio.Package.CodeWindowManager,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32)">
      <summary>Called when the caret has moved.</summary>
      <param name="mgr">[in] The <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object controlling the code window that the caret moved in.</param>
      <param name="textView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object that holds the view of the source file.</param>
      <param name="line">[in] The new line the caret is on.</param>
      <param name="col">[in] the new column the caret is on.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnChangesCommitted(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Called when changes generated by an auto-complete or code snippet expansion operation is committed to the buffer.</summary>
      <param name="flags">[in] A collection of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags" /> enumeration describing the change.</param>
      <param name="ptsChanged">[in] A single <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> describing the range of lines that was changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnCloseSource(Microsoft.VisualStudio.Package.Source)">
      <summary>Called to close the specified <see cref="T:Microsoft.VisualStudio.Package.Source" /> object.</summary>
      <param name="source">[in] The <see cref="T:Microsoft.VisualStudio.Package.Source" /> object to be closed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnIdle(System.Boolean)">
      <summary>Called when no other events need to be handled.</summary>
      <param name="periodic">[in] true if this call is one of a periodic series of idle calls, typically triggered by a timer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnModeChange(Microsoft.VisualStudio.Shell.Interop.DBGMODE)">
      <summary>Called whenever the debug mode has changed while debugging.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="dbgmodeNew">[in] The new debug mode as specified by a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.DBGMODE" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnParseComplete(Microsoft.VisualStudio.Package.ParseRequest)">
      <summary>Called when a background parse has been completed.</summary>
      <param name="req">[in] The <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> containing the parse request information for the just completed parse operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.OpenDocument(System.String)">
      <summary>Opens the specified file.</summary>
      <param name="path">[in] The specified file to open.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.ParseSource(Microsoft.VisualStudio.Package.ParseRequest)">
      <summary>Parses the source based on the specified <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> object.</summary>
      <returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.Package.AuthoringScope" /> object; otherwise, returns a null value.</returns>
      <param name="req">[in] The <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> describing how to parse the source file.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguageService.Preferences">
      <summary>Provides access to the language service preferences.</summary>
      <returns>Always returns a <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.QueryInvalidEncoding(Microsoft.VisualStudio.TextManager.Interop.__VSTFF,System.String@)">
      <summary>Determines if the specified source format is valid or not.</summary>
      <returns>Returns true if the format is not supported by the language service; otherwise, returns false (the format is supported).</returns>
      <param name="format">[in] The format to test. This is a value from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSTFF" /> enumeration.</param>
      <param name="errorMessage">[out] An error string describing why or how the format is invalid. Could be as simple as "The XX format is not supported."</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
      <summary>Returns the request interface from the specified service.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="guidService">[in] The GUID of the service to query.</param>
      <param name="iid">[in] The GUID of the desired interface.</param>
      <param name="obj">[out] An unmarshaled pointer to the interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.RemoveCodeWindowManager(Microsoft.VisualStudio.Package.CodeWindowManager)">
      <summary>Called when the view associated with the specified <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> is closed.</summary>
      <param name="m">[in] The <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object that is being closed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.ResolveName(System.String,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName@)">
      <summary>Returns a list of method names that match the given name modified by the specified flags.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="name">[in] The name to match.</param>
      <param name="flags">[in] A collection of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.RESOLVENAMEFLAGS" /> enumeration.</param>
      <param name="ppNames">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName" /> object containing the list of name or a null value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.ScrollToEnd(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Updates the view in the specified window frame to show the end of the source file.</summary>
      <param name="frame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> containing the view to update.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.ScrollToEnd(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Updates the specified view to show the end of the source file.</summary>
      <param name="view">[in] The view to update.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.SetSite(System.Object)">
      <summary>Called to set or site the service provider for this language service.</summary>
      <param name="site">[in] The object that is to be the parent service provider for this language service. This cannot be a null value!</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.SetUserContextDirty(System.String)">
      <summary>Marks the user context as dirty in the specified source buffer.</summary>
      <param name="fileName">[in] The file name of the source buffer for which to mark the user context dirty.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.LanguageService.Site">
      <summary>Returns the service provider given to this language service.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> object or a null value if <see cref="M:Microsoft.VisualStudio.Package.LanguageService.SetSite(System.Object)" /> was not called with a valid service provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.SynchronizeDropdowns">
      <summary>Called to update a drop-down bar based on the current caret position.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.UpdateLanguageContext(Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.Shell.Interop.IVsUserContext)">
      <summary>Updates the current user help context in a selected region of the given source.</summary>
      <param name="hint">[in] A set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint" /> enumeration.</param>
      <param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object holding the source.</param>
      <param name="ptsSelection">[in] A single <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the selected range of text (or the current caret position).</param>
      <param name="context">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" /> object that is to be updated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.ValidateBreakpointLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Called to determine if the given location can have a breakpoint applied to it.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if there is no code at the given position or returns an error code (the validation is deferred until the debug engine is loaded).</returns>
      <param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> object containing the source file.</param>
      <param name="line">[in] The line number where the breakpoint is to be set.</param>
      <param name="col">[in] The offset into the line where the breakpoint is to be set.</param>
      <param name="pCodeSpan">[out] Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> giving the extent of the code affected by the breakpoint if the breakpoint can be set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.MethodData">
      <summary>Provides support for the IntelliSense method tip operation.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Methods">
      <summary>Represents a collection of method signatures obtained from a parsing operation in a language service.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ParseReason">
      <summary>Provides reasons for a parsing operation in a language service.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.None">
      <summary>A placeholder value indicating that no parsing should be done.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.MemberSelect">
      <summary>Parse the separator character before the current location to obtain a list of members for the class.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.HighlightBraces">
      <summary>Parse to find the matching language pairs (such as "{" and "}" or "&lt;" and "&gt;") that enclose the given location so they and their contents can be highlighted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.MemberSelectAndHighlightBraces">
      <summary>Parse the character at the current location to complete a member selection and to highlight the matching pair to the parsed character (such as a ")" after a method name).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.MatchBraces">
      <summary>Parse the language pair at the given location to finds its match.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.Check">
      <summary>Parse the entire source file, checking for errors. This pass should also create lists of matching language pairs, triplets, members, and methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.CompleteWord">
      <summary>Parse to get the partially completed word before the current position in order to show a list of possible completions (members, arguments, methods).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.DisplayMemberList">
      <summary>Parse the separator and the possible name before it, to obtain a list of members to be shown in a member completion list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.QuickInfo">
      <summary>Parse the identifier or selection at the given location to obtain type information to be shown in an IntelliSense quick info tool tip.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.MethodTip">
      <summary>Parse the method name before the current position to produce a list of all overloaded method signatures that match the method name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.Autos">
      <summary>Parse the code block at the given location to obtain any expressions that might be of interest in the Autos debugging window (an expression is the name of variable or parameter that can be evaluated to produce a value).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.CodeSpan">
      <summary>Parse the section of code containing the specified location to find the extent of the statement. Used in validating breakpoints.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.ParseReason.Goto">
      <summary>Parse the identifier or expression at the specified location to obtain a possible URI of a file where the identifier is defined, declared, or referenced.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ParseRequest">
      <summary>Provides information to execute a parsing operation in a language service.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Severity">
      <summary>Specifies the severity of a parser error in a language service.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Severity.Hint">
      <summary>Indicates a comment returned by the parser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Severity.Warning">
      <summary>Indicates a warning returned by the parser. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Severity.Error">
      <summary>Indicates an error in parsing, however, parsing may have been able to continue.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Severity.Fatal">
      <summary>Indicates a fatal error in parsing that prevented any further parsing.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.#ctor(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.SimpleEditorView" /> for the supplied text buffer.</summary>
      <param name="buffer">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTextLines" /> buffer.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.Buffer">
      <summary>Gets or sets the text buffer.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTextLines" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.ClosePane">
      <summary>Closes the window and unregisters the component.</summary>
      <returns>true if successful, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.CommitPendingEdit(System.Int32@)">
      <summary>Commits any changes made to the file.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.</returns>
      <param name="fCommitFailed">[out] Returns true if the changes could not be committed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.ComponentId">
      <summary>Gets or sets the component ID of the editor view.</summary>
      <returns>The component ID of the editor view.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.ComponentManager">
      <summary>Gets or sets the component manager for this view.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.CreatePaneWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
      <summary>Creates the window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwndParent">A pointer to the parent window.</param>
      <param name="x">The absolute x ordinate.</param>
      <param name="y">The absolute y ordinate.</param>
      <param name="cx">The width of the window.</param>
      <param name="cy">The height of the window.</param>
      <param name="hwnd"> [out] A pointer to the new window pane.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Executes the specified command.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the command is supported and it succeeded; <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" /> if the command is not supported; or an error code if the command failed.</returns>
      <param name="guidCmdGroup">The GUID of the command group. </param>
      <param name="id">The ID of the command.</param>
      <param name="options">An <see cref="T:Microsoft.VisualStudio.OLE.Interop. OLECMDEXECOPT" /> enumeration giving command options.</param>
      <param name="pvaIn">Pointer to a VARIANTARG structure containing input arguments. Can be null.</param>
      <param name="pvaOut">Pointer to a VARIANTARG structure containing command output. Can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FContinueMessageLoop(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Called during each iteration of the message loop. </summary>
      <returns>true if the message loop should continue, false otherwise.</returns>
      <param name="uReason">An enumeration of type <see cref="T:Microsoft.VisualStudio.OLE.Interop._OLELOOP" />.</param>
      <param name="pvLoopData">A pointer to private data.</param>
      <param name="pMsgPeeked">An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG" /> structures. May be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FDoIdle(System.UInt32)">
      <summary>Called to do idle time tasks.  </summary>
      <returns>true if more time is needed to perform the idle time tasks, false otherwise.</returns>
      <param name="grfidlef">Flags from the <see cref="T:Microsoft.VisualStudio.OLE.Interop._OLEIDLEF" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FPreTranslateMessage(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Called to process or modify the message before it is translated and dispatched.</summary>
      <returns>true if the message is consumed, false otherwise.</returns>
      <param name="msg"> An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG" /> structures.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FQueryTerminate(System.Int32)">
      <summary>Called when the component manager wishes to know whether the view is in a state in which it can terminate. </summary>
      <returns>true if the component can terminate, otherwise false.</returns>
      <param name="fPromptUser">true if the user should be prompted if it is necessary to terminate, false if the user should not be prompted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.FReserved1(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Reserved method. </summary>
      <returns>Always true.</returns>
      <param name="reserved"> Reserved. Do not use.</param>
      <param name="message"> Reserved. Do not use.</param>
      <param name="wParam"> Reserved. Do not use.</param>
      <param name="lParam"> Reserved. Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.GetDefaultSize(Microsoft.VisualStudio.OLE.Interop.SIZE[])">
      <summary>Gets the default size of the window.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="size">An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.SIZE" /> structures.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.HwndGetWindow(System.UInt32,System.UInt32)">
      <summary>Gets a window associated with the component.</summary>
      <returns>A pointer to the desired window or null if no such window exists.</returns>
      <param name="dwWhich">A value from <see cref="T:Microsoft.VisualStudio.OLE.Interop._OLECWINDOW" />.</param>
      <param name="dwReserved">Reserved for future use; should be 0.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.IsSupported(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Determines whether the toolbox user supports the referenced data object. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />, otherwise it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.S_FALSE" />.</returns>
      <param name="data">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.ItemPicked(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Sends notification that an item in the toolbox has been selected (by clicking the mouse or by pressing ENTER).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="data">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> that has been selected.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.LoadViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>When implemented in a derived class, loads the view state of the window pane.</summary>
      <returns>When implemented in a derived class, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.</returns>
      <param name="stream">The <see cref="T:IStream" /> from which to load the state of the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.OnActivationChange(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)">
      <summary>Called when a new object is being activated.</summary>
      <param name="pic">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponent" /> if it is the view itself that is being activated, otherwise null.</param>
      <param name="fSameComponent">true if <paramref name="pic" /> is the same component as the callee of this method, otherwise false.</param>
      <param name="pcrinfo">An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECRINFO" /> structures, which represent registry information for <paramref name="pic" />.</param>
      <param name="fHostIsActivating">true if it the host that is being activated, otherwise false.</param>
      <param name="pchostinfo">An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO" /> structures, which represent host information.</param>
      <param name="dwReserved">Reserved for future use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.OnAppActivate(System.Int32,System.UInt32)">
      <summary>Notifies the component whenever the host application is activated or deactivated.</summary>
      <param name="fActive">If true, the host application is being activated, otherwise it is being deactivated.</param>
      <param name="dwOtherThreadID">If the host application is being activated, the ID of the thread that owns the window being deactivated. If the host application is being deactivated, the ID of the thread owning the window being activated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.OnEnterState(System.UInt32,System.Int32)">
      <summary>Notifies the view when the application enters or exits a given state. </summary>
      <param name="uStateID">The state being entered or exited, specified by the <see cref="T:Microsoft.VisualStudio.OLE.Interop. _OLECSTATE" /> enumeration.</param>
      <param name="fEnter">true if the application is entering the specified state, false if it is exiting the state.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.OnLoseActivation">
      <summary>Notifies the active view that it has lost its active status because the host or another component has become active.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <summary>Gets the status of the specified commands.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if all commands are enabled, or an error code.</returns>
      <param name="guidCmdGroup">The GUID of the command group to which the commands belong.</param>
      <param name="cmds">The number of commands to query.</param>
      <param name="prgCmds">An array of command IDs to query.</param>
      <param name="pCmdText">Pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTXT" /> structure for command text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.SaveViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Saves the loaded view state.</summary>
      <returns>When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="stream">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream" /> to which to save the view state.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.SetInfo">
      <summary>Sets the information in the status bar to reflect this view. </summary>
      <returns>When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Initializes this view.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="site">The main <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.Site">
      <summary>Gets or sets the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> for this view.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.Terminate">
      <summary>Called by the component manager when it wishes to terminate the view's registration. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Handles the translation of special navigation keys. </summary>
      <returns>When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="msg">An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG" /> structures holding the keyboard character or character combination to be handled.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.ExecCommand(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Executes specific commands.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the command is supported and it succeeded, <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" /> if the command is not supported, or an error code if the command failed.</returns>
      <param name="guidCmdGroup">The GUID of the command group.</param>
      <param name="cmdId">The ID of the command.</param>
      <param name="cmdExecOptions">An <see cref="T:Microsoft.VisualStudio.OLE.Interop. OLECMDEXECOPT" /> enumeration giving command options. </param>
      <param name="pvaIn">Pointer to a VARIANTARG structure containing input arguments. Can be null.</param>
      <param name="pvaOut">Pointer to a VARIANTARG structure containing command output. Can be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.QueryCommandStatus(System.Guid@,System.UInt32)">
      <summary>Gets the status of the specified command.</summary>
      <returns>By default this finds the menu commands and returns their status, otherwise returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED" />.When overridden by derived classes to provide custom command status, it should return <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDF.OLECMDF_SUPPORTED" /> or <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDF.OLECMDF_ENABLED" />.</returns>
      <param name="guidCmdGroup">The GUID of the command group to which the command belongs.</param>
      <param name="cmdId">The ID of the command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.SimpleEditorView.QueryParameterList(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Gets the parameters for a command. </summary>
      <returns>Usually returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the command succeeded, or <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDERR_E_NOTSUPPORTED" />.</returns>
      <param name="guidCmdGroup">The GUID of the command group to which the command belongs.</param>
      <param name="id">The ID of the command.</param>
      <param name="options">Values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration, which describe how the object should execute the command.</param>
      <param name="pvaIn">Pointer to a VARIANTARG structure containing input arguments. Can be null.</param>
      <param name="pvaOut">Pointer to a VARIANTARG structure containing output data. This should be pre-allocated as an empty Object ready to receive the result string.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Source">
      <summary>Represents a source file in the language service and controls parsing operations on that source.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.TextSpanHelper">
      <summary>A utility class that provides useful methods for manipulating and comparing instances of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> class as well as validating positions.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.TextTipData">
      <summary>Provides a default implementation of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData" /> for use in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow" /> for displaying tool tips.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.TokenColor">
      <summary>Provides initial values for color indices as reported by an <see cref="T:Microsoft.VisualStudio.Package.IScanner" /> scanner.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenColor.Text">
      <summary>= 0. The default. This represents the color corresponding to the user's default text colors (the language service's <see cref="T:Microsoft.VisualStudio.Package.ColorableItem" /> list is ignored in this one case).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenColor.Keyword">
      <summary>= 1. Represents the color for a language keyword (for example, "for", "if", or "else").</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenColor.Comment">
      <summary>= 2. Represents the color for a comment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenColor.Identifier">
      <summary>= 3. Represents the color for an identifier or name (for example, a class, method, or variable name).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenColor.String">
      <summary>= 4. Represents the color for a string, typically bounded by single or double quotes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenColor.Number">
      <summary>= 5. Represents the color for a number (a string of decimal or hexadecimal digits).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.TokenInfo">
      <summary>Provides information about a particular token encountered by a language service's language parser.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.TokenType">
      <summary>Specifies the different types of tokens that can be identified and returned from a language service scanner.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenType.Unknown">
      <summary>The token is an unknown type. This is typically used for any token not recognized by the parser and should be considered an error in the code being parsed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenType.Text">
      <summary>General text; any text not identified as a specified token type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenType.Keyword">
      <summary>A language keyword, an identifier that is reserved by the language. For example, in C#, do, while, foreach, if, and else, are all keywords.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenType.Identifier">
      <summary>An identifier or name. For example, the name of a variable, method, or class. In XML, this could be the name of a tag or attribute.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenType.String">
      <summary>A string. Typically defined as zero or more characters bounded by double quotes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenType.Literal">
      <summary>A literal value (a character or number). For example, in C# or C++, this is a character bounded by single quotes, or a decimal or hexadecimal number.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenType.Operator">
      <summary>A punctuation character that has a specific meaning in a language. For example, in C#, arithmetic operators +, -, *, and /. In C++, pointer dereference operator -&gt;, insertion operator &gt;&gt;, and extraction operation &lt;&lt;. In XML, assignment operator =.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenType.Delimiter">
      <summary>A token that operates as a separator between two language elements. For example, in C#, the period "." between class name and member name. In XML, the angle brackets surrounding a tag, &lt; and &gt;.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenType.WhiteSpace">
      <summary>A space, tab, or newline. Typically, a contiguous run of any whitespace is considered a single whitespace token. For example, the three spaces in "name   this" would be treated as one whitespace token.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenType.LineComment">
      <summary>A line comment (comment is terminated at the end of the line). For example, in C# or C++, a comment is preceded by a //. In Visual Basic, this is a single tick '.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenType.Comment">
      <summary>A block comment. For example, in C# or C++, a comment is bounded by /* and */. In XML, the comment is bounded by &lt;!-- and --&gt;.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars">
      <summary>Provides support for the combo boxes showing type and member information as offered by a language service.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Variant">
      <summary>Represents an object that can be interpreted as more than one type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.#ctor(Microsoft.VisualStudio.Package.CodeWindowManager,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.ViewFilter" /> class.</summary>
      <param name="mgr">[in] A <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object that owns this view. This is required and cannot be a null value.</param>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object this class is to work with. This is required and cannot be a null value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.CanReformat">
      <summary>Determines whether the source can be reformatted by the language service.</summary>
      <returns>true if the source can be reformatted, otherwise false: either the debugger is active or the language service does not support reformatting.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.Close">
      <summary>Closes down the view filter, releasing any allocated resources.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ViewFilter.CodeWindowManager">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> that owns this <see cref="T:Microsoft.VisualStudio.Package.ViewFilter" />.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.CommentSelection">
      <summary>Handles the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMMENT_BLOCK" /> command to comment out the current selection in the view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.CreateTextTipData">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Package.TextTipData" /> class.</summary>
      <returns>Returns a new <see cref="T:Microsoft.VisualStudio.Package.TextTipData" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.Dispose">
      <summary>Frees up any resources allocated when the <see cref="T:Microsoft.VisualStudio.Package.ViewFilter" /> class was created.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.ExecCommand(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Executes the specified command.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="guidCmdGroup">[in] The GUID of the command group.</param>
      <param name="nCmdId">[in] The specific ID of the command from the command group. This identifies the command to execute.</param>
      <param name="nCmdexecopt">[in] Additional parameters for the command (packed into a 32-bit value).</param>
      <param name="pvaIn">[in] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object holding any parameters required by the command. This can be a null value indicating there are no additional parameters.</param>
      <param name="pvaOut">[in, out] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object to hold the result of the command, if any.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.Finalize">
      <summary>Performs final clean up just before the <see cref="T:Microsoft.VisualStudio.Package.ViewFilter" /> object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetDataTipText(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String@)">
      <summary>Returns text about the given span that can be shown in a tool tip.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code. Since this method can begin a background parse operation, a typical error code that can be returned is <see cref="F:Microsoft.VisualStudio.VSConstants.E_PENDING" /> if the background parse has not yet finished.</returns>
      <param name="aspan">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object specifying the location in the code to get information about and returns the span indicating the extent of the identifier or expression the text represents. This returned span indicates the area a mouse cursor can be in before the tool tip is dismissed.</param>
      <param name="textValue">[out] Returns a string to be displayed in a tool tip. This string is valid only if a success code is returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetExpansionProvider">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> object.</summary>
      <returns>If there is an expansion provider, returns an <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> object; otherwise, returns null.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetFullDataTipText(System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String@)">
      <summary>Returns a string that can be used in a tool tip, taking into account additional sources of text such as a debugger.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code. Other possible success codes are <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TipSuccesses2.TIP_S_NODEFAULTTIP" /> (only the value returned from the debugger is used) and <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TipSuccesses.TIP_S_ONLYIFNOMARKER" /> (show the tool tip only if no parsing errors have occurred in the same location).</returns>
      <param name="textValue">[in] The string to use as the default.</param>
      <param name="ts">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object specifying the span of source to examine.</param>
      <param name="fullTipText">[out] Returns a string to be used as a tool tip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetPairExtents(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the extent of the innermost matching pair of language elements that contains the given location.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="line">[in] The line number of the location to examine.</param>
      <param name="index">[in] The character offset on the line to examine.</param>
      <param name="span">[out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object specifying the extent of the enclosing matching pair of language elements.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetSelection">
      <summary>Returns the extent of the currently selected text.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object specifying the selected span of text.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetWordExtent(System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the extent of the word or expression that contains the given location.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if there is no identifier or expression at the specified location; otherwise, returns an error code.</returns>
      <param name="line">[in] The line number to examine.</param>
      <param name="index">[in] The character offset on the line to examine.</param>
      <param name="flags">[in] A combination of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS" /> enumeration.</param>
      <param name="span">[out] Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that contains the requested span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandleGoto(Microsoft.VisualStudio.VSConstants.VSStd97CmdID)">
      <summary>Processes the specified "go to" command.</summary>
      <param name="cmd">[in] A value from the <see cref="T:Microsoft.VisualStudio.VSConstants.VSStd97CmdID" /> enumeration specifying the type of "go to" command to execute. Expected values are <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GotoDefn" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GotoDecl" />, and <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GotoRef" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandlePostExec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean)">
      <summary>Handles post-processing after a command has been executed.</summary>
      <param name="guidCmdGroup">[in] The GUID of the command group.</param>
      <param name="nCmdId">[in] The specific ID of the command from the command group. This identifies the command to execute.</param>
      <param name="nCmdexecopt">[in] Additional parameters for the command (packed into a 32-bit value).</param>
      <param name="pvaIn">[in] A pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object holding any parameters required by the command. This can be a null value indicating there are no additional parameters.</param>
      <param name="pvaOut">[in, out] A pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object to hold the result of the command, if any.</param>
      <param name="bufferWasChanged">[in] The GUID of the command group.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandlePreExec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Handles pre-processing before a command is executed.</summary>
      <returns>Returns true if the command was actually handled in the pre-processing; otherwise, returns false.</returns>
      <param name="guidCmdGroup">[in] The GUID of the command group.</param>
      <param name="nCmdId">[in] The specific ID of the command from the command group. This identifies the command to execute.</param>
      <param name="nCmdexecopt">[in] Additional parameters for the command (packed into a 32-bit value).</param>
      <param name="pvaIn">[in] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object holding any parameters required by the command. This can be a null value indicating there are no additional parameters.</param>
      <param name="pvaOut">[in, out] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object to hold the result of the command, if any.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandleQuickInfo">
      <summary>Handles the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.QUICKINFO" /> command to show tool tip information about the selected identifier or expression.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandleSmartIndent">
      <summary>Handles smart indentation.</summary>
      <returns>Returns true if the caret position has changed as a result of smart indentation. Returns false if no changes have been made to the source.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.InnerExec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Executes an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> command.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.</returns>
      <param name="guidCmdGroup">The GUID of the command group to which the command belongs.</param>
      <param name="nCmdId">The command ID.</param>
      <param name="nCmdexecopt">Values from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT" /> enumeration, which specify how to execute the command.</param>
      <param name="pvaIn">A pointer to a VARIANTARG structure containing input arguments. Can be null.</param>
      <param name="pvaOut">A pointer to a VARIANTARG structure to receive command output. Can be null. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ViewFilter.IsExpansionUIActive">
      <summary>Determines if the code snippet expansion user interface (UI) is active.</summary>
      <returns>If the expansion UI is active, returns true; otherwise, returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)"></member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnAfterSnippetsKeyBindingChange(System.UInt32,System.UInt32,System.Int32)">
      <summary>Called after there has been a change in the key binding for the Invoke Snippet From Shortcut command.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.</returns>
      <param name="dwCmdGuid">The GUID of the command group to which the command belongs.</param>
      <param name="dwCmdId">The command ID.</param>
      <param name="fBound">true if a key binding was added, false if it was removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnAfterSnippetsUpdate">
      <summary>Called whenever a folder that contains snippets has been updated and the snippets from that folder have been read in. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnAutoComplete">
      <summary>Called when the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AUTOCOMPLETE" /> command is received.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnChangeCaretLine(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32)">
      <summary>Called when the caret moves to another line.</summary>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view in which the caret was moved.</param>
      <param name="line">[in] The line number to which the caret was moved.</param>
      <param name="col">[in] The character offset on the line to which the caret was moved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnChangeScrollInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Called when the scroll information for the specified scroll bar has changed.</summary>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that owns the scroll bar.</param>
      <param name="iBar">[in] The scroll bar ID: SB_VERT for the vertical bar and SB_HORZ for the horizontal bar.</param>
      <param name="iMinUnit">[in] The new minimum value for the scroll bar (typically in lines).</param>
      <param name="iMaxUnits">[in] The new maximum value for the scroll bar (typically in lines).</param>
      <param name="iVisibleUnits">[in] The new value representing the number of visible lines in the scroll bar (affects the size of the scroll thumb).</param>
      <param name="iFirstVisibleUnit">[in] The new value for the first visible line in the scroll bar (affects the position of the scroll thumb).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnKillFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called when the specified view loses focus.</summary>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that is losing focus.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnSetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Called when the buffer of lines is being set or changed in the given view.</summary>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view whose buffer is being changed.</param>
      <param name="buffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object representing the new buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnSetFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called when the specified view gains focus.</summary>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that has received the focus.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.QueryCommandStatus(System.Guid@,System.UInt32)">
      <summary>Determines if the specified command is supported.</summary>
      <returns>If the command is supported, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDF.OLECMDF_SUPPORTED" /> (typically with the <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDF.OLECMDF_ENABLED" /> flag added to indicate the command should be shown enabled); otherwise, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED" /> if the command is not supported or <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_UNKNOWNGROUP" /> if the entire command group is not supported.</returns>
      <param name="guidCmdGroup">[in] The GUID of the command group.</param>
      <param name="nCmdId">[in] The ID of the command to examine.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.QueryParameterList(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Called to obtain the parameter for the specified command.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code. A typical error code is <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED" /> if parameters on methods are not supported.</returns>
      <param name="guidCmdGroup">[in] The GUID of the command group.</param>
      <param name="nCmdId">[in] The ID of the command for which to get the parameter.</param>
      <param name="nCmdexecopt">[in] Additional parameters for the command (packed into a 32-bit value).</param>
      <param name="pvaIn">[in] Always null.</param>
      <param name="pvaOut">[in, out] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object to hold the parameter of the command expressed as a string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.ReformatDocument">
      <summary>Handles the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FORMATDOCUMENT" /> command to reformat the entire document.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.ReformatSelection">
      <summary>Handles the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FORMATSELECTION" /> command to reformat a selection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ViewFilter.SnippetBound">
      <summary>Gets or sets whether or not a key has been bound to the Invoke Snippet From Shortcut command.</summary>
      <returns>true if a shortcut key exists, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ViewFilter.Source">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Package.Source" /> associated with this <see cref="T:Microsoft.VisualStudio.Package.ViewFilter" />.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.Source" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ViewFilter.TextTipData">
      <summary>Gets or sets the <see cref="T:Microsoft.VisualStudio.Package.TextTipData" /> associated with this view.</summary>
      <returns>The existing <see cref="T:Microsoft.VisualStudio.Package.TextTipData" /> object, or if none exists creates a new one.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ViewFilter.TextView">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object associated with this <see cref="T:Microsoft.VisualStudio.Package.ViewFilter" /> object.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.TypeChar(System.Char)">
      <summary>Executes a <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TYPECHAR" /> on the current command target chain.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ch">[in] The character command that is to be executed. This can only be a character that can be typed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.UncommentSelection">
      <summary>Handles the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNCOMMENTBLOCK" /> command to uncomment the current selection in the current view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
      <summary>Handles the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWCONTEXTMENU" /> command to show a context menu.</summary>
      <param name="menuId">[in] The ID of the menu to show.</param>
      <param name="groupGuid">[in] The GUID of the menu group from which the menu ID is taken.</param>
      <param name="target">[in] The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> object that is to handle the commands in the context menu.</param>
    </member>
  </members>
</doc>