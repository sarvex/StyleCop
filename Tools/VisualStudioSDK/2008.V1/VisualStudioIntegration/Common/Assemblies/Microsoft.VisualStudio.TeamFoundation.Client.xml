<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>Microsoft.VisualStudio.TeamFoundation.Client</name>
	</assembly>
	<members>
		<member name="M:Microsoft.TeamFoundation.Client.PropertyBag.#ctor">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.TeamFoundation.Client.PropertyBag"></see> class.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Client.PropertyBag.GetProperty(System.String)">
			<summary>Returns the property corresponding to this key from the property bag.</summary>
			<returns>A non-null value that corresponds to the key in the <see cref="T:Microsoft.TeamFoundation.Client.PropertyBag"></see>.</returns>
			<param name="key">The key of the item to be retrieved.</param>
			<exception cref="PropertyDoesNotExistException">Thrown if key cannot be found in the <see cref="T:Microsoft.TeamFoundation.Client.PropertyBag"></see>.</exception>
		</member>
		<member name="M:Microsoft.TeamFoundation.Client.PropertyBag.GetProperty``1(System.String)">
			<summary>Returns the property corresponding to this key from the property bag.</summary>
			<returns>A non-null value of type T.</returns>
			<param name="key">The key of the item to be retrieved.</param>
			<exception cref="PropertyDoesNotExistException">Thrown if key cannot be found in the <see cref="T:Microsoft.TeamFoundation.Client.PropertyBag"></see>.</exception>
		</member>
		<member name="M:Microsoft.TeamFoundation.Client.PropertyBag.HasProperty(System.String)">
			<summary>Returns true if the <see cref="T:Microsoft.TeamFoundation.Client.PropertyBag"></see> stores a key/value pair at this key, otherwise false.</summary>
			<returns>true if the <see cref="T:Microsoft.TeamFoundation.Client.PropertyBag"></see> stores a key/value pair at this key, otherwise false.</returns>
			<param name="key">The key of the item to be checked.</param>
		</member>
		<member name="M:Microsoft.TeamFoundation.Client.PropertyBag.SetProperty(System.String,System.Object)">
			<summary>Stores the value in the property bag at the given key. Adds the key/value pair if it does not already exist in the <see cref="T:Microsoft.TeamFoundation.Client.PropertyBag"></see>.</summary>
			<param name="key">The key of the item to be stored.</param>
			<param name="value">The value of the item to be stored.</param>
			<exception cref="ArgumentNullException">Thrown if value is null.</exception>
		</member>
		<member name="P:Microsoft.TeamFoundation.Client.PropertyBag.Item(System.String)">
			<summary>Key-based indexer for <see cref="T:Microsoft.TeamFoundation.Client.PropertyBag"></see>.</summary>
			<returns>A non-null value that corresponds to the key in the <see cref="T:Microsoft.TeamFoundation.Client.PropertyBag"></see>.</returns>
			<param name="key">The key of the item to be retrieved.</param>
			<exception cref="PropertyDoesNotExistException">Thrown if key cannot be found in the <see cref="T:Microsoft.TeamFoundation.Client.PropertyBag"></see>.</exception>
		</member>
		<member name="M:Microsoft.TeamFoundation.Client.TeamProjectWizardPage.AddConfirmationEntries(Microsoft.TeamFoundation.Client.ConfirmationBuilder)">
			<summary>Use the provided <see cref="T:Microsoft.TeamFoundation.Client.ConfirmationBuilder"></see> to add this page's entries into the Confirmation Page.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseAsyncResult.#ctor(System.AsyncCallback,System.Object)">
			<summary>Initializes the aync result object and stores the user's callback and state.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseAsyncResult.Completed(System.Exception)">
			<summary>Registers completion of the asynchronous operation by signaling the event and calling the callback method.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.AddChild(Microsoft.TeamFoundation.Common.BaseHierarchyNode)">
			<summary>Inserts a new child for the current node.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.Close">
			<summary>Close this node and all its children.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.CompareTo(Microsoft.TeamFoundation.Common.BaseHierarchyNode)">
			<summary>Compare nodes with <see cref="P:Microsoft.TeamFoundation.Common.BaseHierarchyNode.NodePriority"></see> and <see cref="P:Microsoft.TeamFoundation.Common.BaseHierarchyNode.Name"></see>.</summary>
			<returns>Returns -1, 0, or 1 respectively, if this node is less than, equal to, or greater than the node parameter.</returns>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.Detach">
			<summary>Takes this node and its subtree out of its parent, but does not remove it from the hierarchy container.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.EndRefresh(System.IAsyncResult)">
			<summary>Gets the results of the node refresh.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.InitAsFolder">
			<summary>Initializes this node as a folder node.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.InitAsLeaf">
			<summary>Initializes this node as a leaf node.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.LaunchVsBrowserWindow(System.String)">
			<summary>Creates a <see cref="T:System.Windows.Forms.WebBrowser"></see> window in Visual Studio to view the specified Uri.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.LaunchVsBrowserWindow(System.String,System.String)">
			<summary>Creates a <see cref="T:System.Windows.Forms.WebBrowser"></see> window in Visual Studio to view the specified Uri.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.LinkWindow(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
			<summary>Links the window to the node in the tree. When the browser window becomes active, the corresponding tree node is selected.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.ParseCanonicalName(System.String)">
			<summary>Searches the node tree for a node with the specified canonical name.</summary>
			<returns>If an exact match is found, returns the current node ID. If no match can be found, returns <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL"></see>.</returns>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.Refresh(Microsoft.TeamFoundation.Common.BaseHierarchyNode.RefreshAsyncResult)">
			<summary>Refreshes this node and all its child nodes.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.Remove">
			<summary>Removes this node from its tree, and removes this node's hierarchy from the tree that contains it.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseHierarchyNode.StopRefresh">
			<summary>Stops refreshing in this node and all its child nodes.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseUIHierarchy.AddTreeToHierarchy(Microsoft.TeamFoundation.Common.BaseHierarchyNode,System.Boolean)">
			<summary>Adds the specified node and all its children recursively to this hierarchy. If isRoot is true, sets the node as the root of the hierarchy.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseUIHierarchy.ClearHierarchyDataObject">
			<summary>Clears the HierarchyData out of the clipboard.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseUIHierarchy.EndWaitForRefresh(System.IAsyncResult)">
			<summary>Waits for the completion of a refresh operation. Uses the <see cref="T:System.IAsyncResult"></see> returned from <see cref="M:Microsoft.TeamFoundation.Common.BaseUIHierarchy.BeginWaitForRefresh(System.AsyncCallback,System.Object)"></see>.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseUIHierarchy.ExecCopyCommand(Microsoft.TeamFoundation.Common.SelectionPair[])">
			<summary>Performs a copy operation on the specified items.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseUIHierarchy.ExecCutCommand(Microsoft.TeamFoundation.Common.SelectionPair[])">
			<summary>Performs a cut operation on the specified items.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseUIHierarchy.ExecPasteCommand(Microsoft.TeamFoundation.Common.SelectionPair[])">
			<summary>Pastes the current clipboard onto the specified items.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseUIHierarchy.ExecPasteCommand(Microsoft.TeamFoundation.Common.BaseUIHierarchy.HierarchyDataObject,Microsoft.TeamFoundation.Common.SelectionPair[])">
			<summary>Virtual method to perform a paste. This virtual method does nothing. Derived classes should override this method to implement their specific paste logic. </summary>
			<returns>Derived methods should return a value that indicates what they did as a result of the operation. Return DropEffect.Move if the paste was performed and the source is free to remove its copy of the data (in the event it was a cut).  Return DropEffect.Link if the source should not remove the information (if it was a cut).</returns>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseUIHierarchy.GetProperty(System.UInt32,System.Int32,System.Object@)">
			<summary>Gets properties from the hierarchy.</summary>
			<param name="propVal">The location for the returned property value.</param>
			<param name="itemId">The node.</param>
			<param name="propId">The requested property.</param>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseUIHierarchy.ResetUIHierarchy">
			<summary>Clear all nodes out of this UI hierarchy.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseUIHierarchy.SetPropertiesObject(System.UInt32,System.Object)">
			<summary>Sets the properties object associated with a node in this hierarchy.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseUIHierarchy.SetProperty(System.UInt32,System.Int32,System.Object)">
			<summary>Called by Visual Studio to set properties in the hierarchy.</summary>
			<param name="value">The new value.</param>
			<param name="itemId">The node.</param>
			<param name="propId">Identifies the property to be set.</param>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BaseUIHierarchy.WaitForRefresh">
			<summary>Synchronous method to wait for the hierarchy to refresh.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.BasicHelper.UnlockDocument(System.Int32)">
			<summary>Unlocks a document in the Running Document Table.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.PluginHostPackage.Dispose(System.Boolean)">
			<summary>Cleans up by unregistering all the services registered by <see cref="T:Microsoft.TeamFoundation.Common.PluginHostPackage"></see>.</summary>
		</member>
		<member name="M:Microsoft.TeamFoundation.Common.PluginHostPackage.Initialize">
			<summary>Initializes the package.</summary>
			<exception cref="InvalidOperationException">Thrown if there is no <see cref="T:System.ComponentModel.Design.IServiceContainer"></see> service container for the current <see cref="T:System.Type"></see>.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.TeamFoundation.PluginRegistrationAttribute.#ctor(System.String,System.String,System.Type)">
			<summary>Initializes a new Plugin Registration Attribute.</summary>
			<exception cref="ArgumentNullException">Thrown if pluginCategory, pluginId, or serviceType are null.</exception>
			<exception cref="ArgumentException">Thrown if pluginCategory or pluginId are blank.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.TeamFoundation.PluginRegistrationAttribute.#ctor(System.String,System.String,System.Type,System.String)">
			<summary>Initializes a new Plugin Registration Attribute.</summary>
			<exception cref="ArgumentNullException">Thrown if pluginCategory, pluginId, or serviceType are null.</exception>
			<exception cref="ArgumentException">Thrown if pluginCategory or pluginId are blank.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.TeamFoundation.PluginRegistrationAttribute.#ctor(System.String,System.String,System.Type,System.String,System.String)">
			<summary>Initializes a new Plugin Registration Attribute.</summary>
			<exception cref="ArgumentNullException">Thrown if pluginCategory, pluginId, or serviceType are null.</exception>
			<exception cref="ArgumentException">Thrown if pluginCategory or pluginId are blank.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.TeamFoundation.PluginRegistrationAttribute.#ctor(System.String,System.String,System.Type,System.String,System.String,System.Boolean)">
			<summary>Initializes a new Plugin Registration Attribute.</summary>
			<exception cref="ArgumentNullException">Thrown if pluginCategory, pluginId, or serviceType are null.</exception>
			<exception cref="ArgumentException">Thrown if pluginCategory or pluginId are blank.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.TeamFoundation.PluginRegistrationAttribute.#ctor(System.String,System.String,System.Type,System.String,System.String,System.Boolean,System.String)">
			<summary>Initializes a new Plugin Registration Attribute.</summary>
			<exception cref="ArgumentNullException">Thrown if pluginCategory, pluginId, or serviceType are null.</exception>
			<exception cref="ArgumentException">Thrown if pluginCategory or pluginId are blank.</exception>
		</member>
	</members>
</doc>